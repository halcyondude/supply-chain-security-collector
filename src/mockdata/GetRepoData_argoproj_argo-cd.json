{
	"data": {
		"repository": {
			"name": "argo-cd",
			"nameWithOwner": "argoproj/argo-cd",
			"url": "https://github.com/argoproj/argo-cd",
			"description": "Declarative Continuous Deployment for Kubernetes",
			"releases": {
				"nodes": [
					{
						"name": "v0.1.0",
						"tagName": "v0.1.0",
						"url": "https://github.com/argoproj/argo-cd/releases/tag/v0.1.0",
						"createdAt": "2018-03-12T21:41:46Z",
						"releaseAssets": {
							"nodes": [
								{
									"name": "argocd-darwin-amd64",
									"downloadUrl": "https://github.com/argoproj/argo-cd/releases/download/v0.1.0/argocd-darwin-amd64"
								},
								{
									"name": "argocd-linux-amd64",
									"downloadUrl": "https://github.com/argoproj/argo-cd/releases/download/v0.1.0/argocd-linux-amd64"
								}
							]
						}
					}
				]
			},
			"workflows": {
				"entries": [
					{
						"name": "README.md",
						"object": {
							"text": "# Workflows\n\n| Workflow           | Description                                                    |\n|--------------------|----------------------------------------------------------------|\n| ci-build.yaml      | Build, lint, test, codegen, build-ui, analyze, e2e-test        |\n| codeql.yaml        | CodeQL analysis                                                |\n| image-reuse.yaml   | Build, push, and Sign container images                         |\n| image.yaml         | Build container image for PR's & publish for push events       |\n| init-release.yaml  | Build manifests and version then create a PR for release branch|\n| pr-title-check.yaml| Lint PR for semantic information                               |\n| release.yaml       | Build images, cli-binaries, provenances, and post actions      |\n| scorecard.yaml     | Generate scorecard for supply-chain security                   |\n| update-snyk.yaml   | Scheduled snyk reports                                         |\n\n# Reusable workflows\n\n## image-reuse.yaml\n\n- The reusable workflow can be used to publish or build images with multiple container registries(Quay,GHCR, dockerhub), and then sign them with cosign when an image is published.\n- A GO version `must` be specified e.g. 1.21\n- The image name for each registry *must* contain the tag. Note: multiple tags are allowed for each registry using a CSV type.\n- Multiple platforms can be specified e.g. linux/amd64,linux/arm64\n- Images are not published by default. A boolean value must be set to `true` to push images.\n- An optional target can be specified.\n\n| Inputs            | Description                         | Type        | Required | Defaults        |\n|-------------------|-------------------------------------|-------------|----------|-----------------|\n| go-version        | Version of Go to be used            | string      | true     | none            |\n| quay_image_name   | Full image name and tag             | CSV, string | false    | none            |\n| ghcr_image_name   | Full image name and tag             | CSV, string | false    | none            |\n| docker_image_name | Full image name and tag             | CSV, string | false    | none            |\n| platforms         | Platforms to build (linux/amd64)    | CSV, string | false    | linux/amd64     |\n| push              | Whether to push image/s to registry | boolean     | false    | false           |\n| target            | Target build stage                  | string      | false    | none            |\n\n| Outputs     | Description                              | Type  |\n|-------------|------------------------------------------|-------|\n|image-digest | Image digest of image container created  | string|\n\n"
						}
					},
					{
						"name": "bump-major-version.yaml",
						"object": {
							"text": "name: Bump major version\non:\n  workflow_dispatch: {}\n\npermissions: {}\n\njobs:\n  prepare-release:\n    permissions:\n      contents: write  # for peter-evans/create-pull-request to create branch\n      pull-requests: write  # for peter-evans/create-pull-request to create a PR\n    name: Automatically update major version\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694  # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      # Get the current major version from go.mod and save it as a variable.\n      - name: Get target version\n        id: get-target-version\n        run: |\n          set -ue\n          CURRENT_VERSION=$(grep 'module github.com/argoproj/argo-cd' go.mod | awk '{print $2}' | sed 's/.*\\/v//')\n          echo \"TARGET_VERSION=$((CURRENT_VERSION + 1))\" >> $GITHUB_OUTPUT\n\n      - name: Copy source code to GOPATH\n        run: |\n          mkdir -p ~/go/src/github.com/argoproj\n          cp -a ../argo-cd ~/go/src/github.com/argoproj\n\n      - name: Run script to bump the version\n        run: |\n          hack/bump-major-version.sh\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Add ~/go/bin to PATH\n        run: |\n          echo \"/home/runner/go/bin\" >> $GITHUB_PATH\n      - name: Add /usr/local/bin to PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n      - name: Download & vendor dependencies\n        run: |\n          # We need to vendor go modules for codegen yet\n          go mod download\n          go mod vendor -v\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n      - name: Install toolchain for codegen\n        run: |\n          make install-codegen-tools-local\n          make install-go-tools-local\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n        # We install kustomize in the dist directory\n      - name: Add dist to PATH\n        run: |\n          echo \"/home/runner/work/argo-cd/argo-cd/dist\" >> $GITHUB_PATH\n      - name: Run codegen\n        run: |\n          set -x\n          export GOPATH=$(go env GOPATH)\n          make codegen-local\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n\n      - name: Copy changes back\n        run: |\n          # Copy the contents back, but skip the .git directory\n          rsync -a --exclude=.git /home/runner/go/src/github.com/argoproj/argo-cd/ ../argo-cd\n\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e  # v7.0.8\n        with:\n          commit-message: \"Bump major version to ${{ steps.get-target-version.outputs.TARGET_VERSION }}\"\n          title: \"Bump major version to ${{ steps.get-target-version.outputs.TARGET_VERSION }}\"\n          body: |\n            Congrats! You've just bumped the major version to ${{ steps.get-target-version.outputs.TARGET_VERSION }}.\n            \n            Next steps:\n            - [ ] Merge this PR\n            - [ ] Add an upgrade guide to the docs for this version\n          branch: bump-major-version\n          branch-suffix: random\n          signoff: true"
						}
					},
					{
						"name": "cherry-pick.yml",
						"object": {
							"text": "name: Cherry Pick\n\non:\n  pull_request_target:\n    branches:\n      - master\n    types: [\"labeled\", \"closed\"]\n\njobs:\n  cherry-pick:\n    name: Cherry Pick\n    if: |\n      github.event.pull_request.merged == true && (\n        (github.event.action == 'labeled' && startsWith(github.event.label.name, 'cherry-pick/')) ||\n        (github.event.action == 'closed' && contains(toJSON(github.event.pull_request.labels.*.name), 'cherry-pick/'))\n      )\n    runs-on: ubuntu-latest\n    steps:\n      - name: Generate a token\n        id: generate-token\n        uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1\n        with:\n          app-id: ${{ vars.CHERRYPICK_APP_ID }}\n          private-key: ${{ secrets.CHERRYPICK_APP_PRIVATE_KEY }}\n\n      - name: Checkout repository\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694  # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ steps.generate-token.outputs.token }}\n\n      - name: Configure Git\n        run: |\n          git config --global user.name \"github-actions[bot]\"\n          git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n\n      - name: Cherry pick commit\n        id: cherry-pick\n        run: |\n          set -e\n\n          # Extract data directly from GitHub event context\n          MERGE_COMMIT=\"${{ github.event.pull_request.merge_commit_sha }}\"\n          \n          # Extract target branch from labels\n          if [[ \"${{ github.event.action }}\" == \"labeled\" ]]; then\n            # Label was just added - use it directly\n            CHERRY_PICK_LABEL=\"${{ github.event.label.name }}\"\n          else\n            # PR was closed - find cherry-pick label from all labels\n            CHERRY_PICK_LABEL=$(echo '${{ toJSON(github.event.pull_request.labels) }}' | jq -r '.[] | select(.name | startswith(\"cherry-pick/\")) | .name' | head -1)\n          fi\n          \n          VERSION_NUMBER=\"${CHERRY_PICK_LABEL#cherry-pick/}\"\n          echo \"version_number=$VERSION_NUMBER\" >> \"$GITHUB_OUTPUT\"\n          TARGET_BRANCH=\"release-$VERSION_NUMBER\"  # Remove 'cherry-pick/' prefix with `release-` prefix\n          \n          echo \"üçí Cherry-picking commit $MERGE_COMMIT to branch $TARGET_BRANCH\"\n          \n          # Check if target branch exists\n          if ! git show-ref --verify --quiet \"refs/remotes/origin/$TARGET_BRANCH\"; then\n            echo \"‚ùå Target branch '$TARGET_BRANCH' does not exist\"\n            exit 1\n          fi\n          \n          # Create new branch for cherry-pick\n          CHERRY_PICK_BRANCH=\"cherry-pick-${{ github.event.pull_request.number }}-to-${TARGET_BRANCH}\"\n          git checkout -b \"$CHERRY_PICK_BRANCH\" \"origin/$TARGET_BRANCH\"\n          \n          # Perform cherry-pick\n          if git cherry-pick -m 1 \"$MERGE_COMMIT\"; then\n            echo \"‚úÖ Cherry-pick successful\"\n\n            # Extract Signed-off-by from the cherry-pick commit\n            SIGNOFF=$(git log -1 --pretty=format:\"%B\" | grep -E '^Signed-off-by:' || echo \"\")\n\n            # Push the new branch\n            git push origin \"$CHERRY_PICK_BRANCH\"\n\n            # Save data for PR creation\n            echo \"branch_name=$CHERRY_PICK_BRANCH\" >> \"$GITHUB_OUTPUT\"\n            echo \"signoff=$SIGNOFF\" >> \"$GITHUB_OUTPUT\"\n            echo \"target_branch=$TARGET_BRANCH\" >> \"$GITHUB_OUTPUT\"\n          else\n            echo \"‚ùå Cherry-pick failed due to conflicts\"\n            git cherry-pick --abort\n            exit 1\n          fi\n\n      - name: Create Pull Request\n        run: |\n          # Create cherry-pick PR\n          gh pr create \\\n            --title \"${{ github.event.pull_request.title }} (cherry-pick #${{ github.event.pull_request.number }} for ${{ steps.cherry-pick.outputs.version_number }})\" \\\n            --body \"Cherry-picked ${{ github.event.pull_request.title }} (#${{ github.event.pull_request.number }})\n\n          ${{ steps.cherry-pick.outputs.signoff }}\" \\\n            --base \"${{ steps.cherry-pick.outputs.target_branch }}\" \\\n            --head \"${{ steps.cherry-pick.outputs.branch_name }}\"\n          \n          # Comment on original PR\n          gh pr comment ${{ github.event.pull_request.number }} \\\n            --body \"üçí Cherry-pick PR created: #$(gh pr list --head ${{ steps.cherry-pick.outputs.branch_name }} --json number --jq '.[0].number')\"\n        env:\n          GH_TOKEN: ${{ steps.generate-token.outputs.token }}\n\n      - name: Comment on failure\n        if: failure()\n        run: |\n          gh pr comment ${{ github.event.pull_request.number }} \\\n            --body \"‚ùå Cherry-pick failed. Please check the workflow logs for details.\"\n        env:\n          GH_TOKEN: ${{ steps.generate-token.outputs.token }}"
						}
					},
					{
						"name": "ci-build.yaml",
						"object": {
							"text": "name: Integration tests\non:\n  push:\n    branches:\n      - 'master'\n      - 'release-*'\n      - '!release-1.4'\n      - '!release-1.5'\n  pull_request:\n    branches:\n      - 'master'\n      - 'release-*'\n\nenv:\n  # Golang version to use across CI steps\n  # renovate: datasource=golang-version packageName=golang\n  GOLANG_VERSION: '1.25.0'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: ${{ github.ref != 'refs/heads/master' }}\n\npermissions:\n  contents: read\n\njobs:\n  changes:\n    runs-on: ubuntu-latest\n    outputs:\n      backend: ${{ steps.filter.outputs.backend_any_changed }}\n      frontend: ${{ steps.filter.outputs.frontend_any_changed }}\n      docs: ${{ steps.filter.outputs.docs_any_changed }}\n    steps:\n      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46.0.5\n        id: filter\n        with:\n          # Any file which is not under docs/, ui/ or is not a markdown file is counted as a backend file\n          files_yaml: |\n            backend:\n              - '!ui/**'\n              - '!**.md'\n              - '!**/*.md'\n              - '!docs/**'\n            frontend:\n              - 'ui/**'\n              - Dockerfile\n            docs:\n              - 'docs/**'\n  check-go:\n    name: Ensure Go modules synchronicity\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - changes\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Download all Go modules\n        run: |\n          go mod download\n      - name: Check for tidiness of go.mod and go.sum\n        run: |\n          go mod tidy\n          git diff --exit-code -- .\n\n  build-go:\n    name: Build & cache Go code\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - changes\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Restore go build cache\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}\n      - name: Download all Go modules\n        run: |\n          go mod download\n      - name: Compile all packages\n        run: make build-local\n\n  lint-go:\n    permissions:\n      contents: read # for actions/checkout to fetch code\n      pull-requests: read # for golangci/golangci-lint-action to fetch pull requests\n    name: Lint Go code\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - changes\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Run golangci-lint\n        uses: golangci/golangci-lint-action@4afd733a84b1f43292c63897423277bb7f4313a9 # v8.0.0\n        with:\n          # renovate: datasource=go packageName=github.com/golangci/golangci-lint versioning=regex:^v(?<major>\\d+)\\.(?<minor>\\d+)\\.(?<patch>\\d+)?$\n          version: v2.4.0\n          args: --verbose\n\n  test-go:\n    name: Run unit tests for Go packages\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - build-go\n      - changes\n    env:\n      GITHUB_TOKEN: ${{ secrets.E2E_TEST_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}\n      GITLAB_TOKEN: ${{ secrets.E2E_TEST_GITLAB_TOKEN }}\n    steps:\n      - name: Create checkout directory\n        run: mkdir -p ~/go/src/github.com/argoproj\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Create symlink in GOPATH\n        run: ln -s $(pwd) ~/go/src/github.com/argoproj/argo-cd\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Install required packages\n        run: |\n          sudo apt-get install git -y\n      - name: Switch to temporal branch so we re-attach head\n        run: |\n          git switch -c temporal-pr-branch\n          git status\n      - name: Fetch complete history for blame information\n        run: |\n          git fetch --prune --no-tags --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Add ~/go/bin to PATH\n        run: |\n          echo \"/home/runner/go/bin\" >> $GITHUB_PATH\n      - name: Add /usr/local/bin to PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n      - name: Restore go build cache\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}\n      - name: Install all tools required for building & testing\n        run: |\n          make install-test-tools-local\n        # We install kustomize in the dist directory\n      - name: Add dist to PATH\n        run: |\n          echo \"/home/runner/work/argo-cd/argo-cd/dist\" >> $GITHUB_PATH\n      - name: Setup git username and email\n        run: |\n          git config --global user.name \"John Doe\"\n          git config --global user.email \"john.doe@example.com\"\n      - name: Download and vendor all required packages\n        run: |\n          go mod download\n      - name: Run all unit tests\n        run: make test-local\n      - name: Generate test results artifacts\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: test-results\n          path: test-results\n\n  test-go-race:\n    name: Run unit tests with -race for Go packages\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - build-go\n      - changes\n    env:\n      GITHUB_TOKEN: ${{ secrets.E2E_TEST_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}\n      GITLAB_TOKEN: ${{ secrets.E2E_TEST_GITLAB_TOKEN }}\n    steps:\n      - name: Create checkout directory\n        run: mkdir -p ~/go/src/github.com/argoproj\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Create symlink in GOPATH\n        run: ln -s $(pwd) ~/go/src/github.com/argoproj/argo-cd\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Install required packages\n        run: |\n          sudo apt-get install git -y\n      - name: Switch to temporal branch so we re-attach head\n        run: |\n          git switch -c temporal-pr-branch\n          git status\n      - name: Fetch complete history for blame information\n        run: |\n          git fetch --prune --no-tags --depth=1 origin +refs/heads/*:refs/remotes/origin/*\n      - name: Add ~/go/bin to PATH\n        run: |\n          echo \"/home/runner/go/bin\" >> $GITHUB_PATH\n      - name: Add /usr/local/bin to PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n      - name: Restore go build cache\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}\n      - name: Install all tools required for building & testing\n        run: |\n          make install-test-tools-local\n        # We install kustomize in the dist directory\n      - name: Add dist to PATH\n        run: |\n          echo \"/home/runner/work/argo-cd/argo-cd/dist\" >> $GITHUB_PATH\n      - name: Setup git username and email\n        run: |\n          git config --global user.name \"John Doe\"\n          git config --global user.email \"john.doe@example.com\"\n      - name: Download and vendor all required packages\n        run: |\n          go mod download\n      - name: Run all unit tests\n        run: make test-race-local\n      - name: Generate test results artifacts\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: race-results\n          path: test-results/\n\n  codegen:\n    name: Check changes to generated code\n    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.docs == 'true'}}\n    runs-on: ubuntu-22.04\n    needs:\n      - changes\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: Create symlink in GOPATH\n        run: |\n          mkdir -p ~/go/src/github.com/argoproj\n          cp -a ../argo-cd ~/go/src/github.com/argoproj\n      - name: Add ~/go/bin to PATH\n        run: |\n          echo \"/home/runner/go/bin\" >> $GITHUB_PATH\n      - name: Add /usr/local/bin to PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n      - name: Download & vendor dependencies\n        run: |\n          # We need to vendor go modules for codegen yet\n          go mod download\n          go mod vendor -v\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n      - name: Install toolchain for codegen\n        run: |\n          make install-codegen-tools-local\n          make install-go-tools-local\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n        # We install kustomize in the dist directory\n      - name: Add dist to PATH\n        run: |\n          echo \"/home/runner/work/argo-cd/argo-cd/dist\" >> $GITHUB_PATH\n      - name: Run codegen\n        run: |\n          set -x\n          export GOPATH=$(go env GOPATH)\n          git checkout -- go.mod go.sum\n          make codegen-local\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n      - name: Check nothing has changed\n        run: |\n          set -xo pipefail\n          git diff --exit-code -- . ':!go.sum' ':!go.mod' ':!assets/swagger.json' | tee codegen.patch\n        working-directory: /home/runner/go/src/github.com/argoproj/argo-cd\n\n  build-ui:\n    name: Build, test & lint UI code\n    # We run UI logic for backend changes so that we have a complete set of coverage documents to send to codecov.\n    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - changes\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup NodeJS\n        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0\n        with:\n          # renovate: datasource=node-version packageName=node versioning=node\n          node-version: '22.9.0'\n      - name: Restore node dependency cache\n        id: cache-dependencies\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ui/node_modules\n          key: ${{ runner.os }}-node-dep-v2-${{ hashFiles('**/yarn.lock') }}\n      - name: Install node dependencies\n        run: |\n          cd ui && yarn install --frozen-lockfile --ignore-optional --non-interactive\n      - name: Build UI code\n        run: |\n          yarn test\n          yarn build\n        env:\n          NODE_ENV: production\n          NODE_ONLINE_ENV: online\n          HOST_ARCH: amd64\n          # If we're on the master branch, set the codecov token so that we upload bundle analysis\n          CODECOV_TOKEN: ${{ github.ref == 'refs/heads/master' && secrets.CODECOV_TOKEN || '' }}\n        working-directory: ui/\n      - name: Run ESLint\n        run: yarn lint\n        working-directory: ui/\n\n  shellcheck:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - run: |\n          sudo apt-get install shellcheck\n          shellcheck -e SC2059 -e SC2154 -e SC2034 -e SC2016 -e SC1091 $(find . -type f -name '*.sh' | grep -v './ui/node_modules') | tee sc.log\n          test ! -s sc.log\n\n  analyze:\n    name: Process & analyze test artifacts\n    if: ${{ needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' }}\n    runs-on: ubuntu-22.04\n    needs:\n      - test-go\n      - build-ui\n      - changes\n      - test-e2e\n    env:\n      sonar_secret: ${{ secrets.SONAR_TOKEN }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          fetch-depth: 0\n      - name: Restore node dependency cache\n        id: cache-dependencies\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ui/node_modules\n          key: ${{ runner.os }}-node-dep-v2-${{ hashFiles('**/yarn.lock') }}\n      - name: Remove other node_modules directory\n        run: |\n          rm -rf ui/node_modules/argo-ui/node_modules\n      - name: Get e2e code coverage\n        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0\n        with:\n          name: e2e-code-coverage\n          path: e2e-code-coverage\n      - name: Get unit test code coverage\n        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0\n        with:\n          name: test-results\n          path: test-results\n      - name: combine-go-coverage\n        # We generate coverage reports for all Argo CD components, but only the applicationset-controller,\n        # app-controller, repo-server, and commit-server report contain coverage data. The other components currently\n        # don't shut down gracefully, so no coverage data is produced. Once those components are fixed, we can add\n        # references to their coverage output directories.\n        run: |\n          go tool covdata percent -i=test-results,e2e-code-coverage/applicationset-controller,e2e-code-coverage/repo-server,e2e-code-coverage/app-controller,e2e-code-coverage/commit-server -o test-results/full-coverage.out\n      - name: Upload code coverage information to codecov.io\n        uses: codecov/codecov-action@5a1091511ad55cbe89839c7260b706298ca349f7 # v5.5.1\n        with:\n          files: test-results/full-coverage.out\n          fail_ci_if_error: true\n        env:\n          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n      - name: Upload test results to Codecov\n        if: github.ref == 'refs/heads/master' && github.event_name == 'push' && github.repository == 'argoproj/argo-cd'\n        uses: codecov/test-results-action@47f89e9acb64b76debcd5ea40642d25a4adced9f # v1.1.1\n        with:\n          file: test-results/junit.xml\n          fail_ci_if_error: true\n          token: ${{ secrets.CODECOV_TOKEN }}\n      - name: Perform static code analysis using SonarCloud\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n        uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25 # v5.3.1\n        if: env.sonar_secret != ''\n  test-e2e:\n    name: Run end-to-end tests\n    if: ${{ needs.changes.outputs.backend == 'true' }}\n    runs-on: ubuntu-latest-16-cores\n    strategy:\n      fail-fast: false\n      matrix:\n        # latest: true means that this version mush upload the coverage report to codecov.io\n        # We designate the latest version because we only collect code coverage for that version.\n        k3s:\n          - version: v1.33.1\n            latest: true\n          - version: v1.32.1\n            latest: false\n          - version: v1.31.0\n            latest: false\n          - version: v1.30.4\n            latest: false\n    needs:\n      - build-go\n      - changes\n    env:\n      GOPATH: /home/runner/go\n      ARGOCD_FAKE_IN_CLUSTER: 'true'\n      ARGOCD_SSH_DATA_PATH: '/tmp/argo-e2e/app/config/ssh'\n      ARGOCD_TLS_DATA_PATH: '/tmp/argo-e2e/app/config/tls'\n      ARGOCD_E2E_SSH_KNOWN_HOSTS: '../fixture/certs/ssh_known_hosts'\n      ARGOCD_E2E_K3S: 'true'\n      ARGOCD_IN_CI: 'true'\n      ARGOCD_E2E_APISERVER_PORT: '8088'\n      ARGOCD_APPLICATION_NAMESPACES: 'argocd-e2e-external,argocd-e2e-external-2'\n      ARGOCD_SERVER: '127.0.0.1:8088'\n      GITHUB_TOKEN: ${{ secrets.E2E_TEST_GITHUB_TOKEN || secrets.GITHUB_TOKEN }}\n      GITLAB_TOKEN: ${{ secrets.E2E_TEST_GITLAB_TOKEN }}\n    steps:\n      - name: Free Disk Space (Ubuntu)\n        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be\n        with:\n          large-packages: false\n          docker-images: false\n          swap-storage: false\n          tool-cache: false\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n      - name: GH actions workaround - Kill XSP4 process\n        run: |\n          sudo pkill mono || true\n      - name: Install K3S\n        env:\n          INSTALL_K3S_VERSION: ${{ matrix.k3s.version }}+k3s1\n        run: |\n          set -x\n          curl -sfL https://get.k3s.io | sh -\n          sudo chmod -R a+rw /etc/rancher/k3s\n          sudo mkdir -p $HOME/.kube && sudo chown -R runner $HOME/.kube\n          sudo k3s kubectl config view --raw > $HOME/.kube/config\n          sudo chown runner $HOME/.kube/config\n          sudo chmod go-r $HOME/.kube/config\n          kubectl version\n      - name: Restore go build cache\n        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ~/.cache/go-build\n          key: ${{ runner.os }}-go-build-v1-${{ github.run_id }}\n      - name: Add ~/go/bin to PATH\n        run: |\n          echo \"/home/runner/go/bin\" >> $GITHUB_PATH\n      - name: Add /usr/local/bin to PATH\n        run: |\n          echo \"/usr/local/bin\" >> $GITHUB_PATH\n      - name: Add ./dist to PATH\n        run: |\n          echo \"$(pwd)/dist\" >> $GITHUB_PATH\n      - name: Download Go dependencies\n        run: |\n          go mod download\n          go install github.com/mattn/goreman@latest\n      - name: Install all tools required for building & testing\n        run: |\n          make install-test-tools-local\n      - name: Setup git username and email\n        run: |\n          git config --global user.name \"John Doe\"\n          git config --global user.email \"john.doe@example.com\"\n      - name: Pull Docker image required for tests\n        run: |\n          docker pull ghcr.io/dexidp/dex:v2.43.0\n          docker pull argoproj/argo-cd-ci-builder:v1.0.0\n          docker pull redis:7.2.7-alpine\n      - name: Create target directory for binaries in the build-process\n        run: |\n          mkdir -p dist\n          chown runner dist\n      - name: Run E2E server and wait for it being available\n        timeout-minutes: 30\n        run: |\n          set -x\n          # Something is weird in GH runners -- there's a phantom listener for\n          # port 8080 which is not visible in netstat -tulpen, but still there\n          # with a HTTP listener. We have API server listening on port 8088\n          # instead.\n          make start-e2e-local COVERAGE_ENABLED=true 2>&1 | sed -r \"s/[[:cntrl:]]\\[[0-9]{1,3}m//g\" > /tmp/e2e-server.log &\n          count=1\n          until curl -f http://127.0.0.1:8088/healthz; do\n            sleep 10;\n            if test $count -ge 180; then\n              echo \"Timeout\"\n              exit 1\n            fi\n            count=$((count+1))\n          done\n      - name: Run E2E testsuite\n        run: |\n          set -x\n          make test-e2e-local\n          goreman run stop-all || echo \"goreman trouble\"\n          sleep 30\n      - name: Upload e2e coverage report\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: e2e-code-coverage\n          path: /tmp/coverage\n        if: ${{ matrix.k3s.latest }}\n      - name: Upload e2e-server logs\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: e2e-server-k8s${{ matrix.k3s.version }}.log\n          path: /tmp/e2e-server.log\n        if: ${{ failure() }}\n\n  # workaround for status checks -- check this one job instead of each individual E2E job in the matrix\n  # this allows us to skip the entire matrix when it doesn't need to run while still having accurate status checks\n  # see:\n  # https://github.com/argoproj/argo-workflows/pull/12006\n  # https://github.com/orgs/community/discussions/9141#discussioncomment-2296809\n  # https://github.com/orgs/community/discussions/26822#discussioncomment-3305794\n  test-e2e-composite-result:\n    name: E2E Tests - Composite result\n    if: ${{ always() }}\n    needs:\n      - test-e2e\n      - changes\n    runs-on: ubuntu-22.04\n    steps:\n      - run: |\n          result=\"${{ needs.test-e2e.result }}\"\n          # mark as successful even if skipped\n          if [[ $result == \"success\" || $result == \"skipped\" ]]; then\n            exit 0\n          else\n            exit 1\n          fi\n"
						}
					},
					{
						"name": "codeql.yml",
						"object": {
							"text": "name: \"Code scanning - action\"\n\non:\n  push:\n    # Secrets aren't available for dependabot on push. https://docs.github.com/en/enterprise-cloud@latest/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/troubleshooting-the-codeql-workflow#error-403-resource-not-accessible-by-integration-when-using-dependabot\n    branches-ignore:\n      - 'dependabot/**'\n      - 'cherry-pick-*'\n  pull_request:\n  schedule:\n    - cron: '0 19 * * 0'\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions:\n  contents: read\n\njobs:\n  CodeQL-Build:\n    permissions:\n      actions: read  # for github/codeql-action/init to get workflow details\n      contents: read  # for actions/checkout to fetch code\n      security-events: write  # for github/codeql-action/autobuild to send a status report\n    if: github.repository == 'argoproj/argo-cd' || vars.enable_codeql\n\n    # CodeQL runs on ubuntu-latest and windows-latest\n    runs-on: ubuntu-22.04\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n\n    # Use correct go version. https://github.com/github/codeql-action/issues/1842#issuecomment-1704398087\n    - name: Setup Golang\n      uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n      with:\n        go-version-file: go.mod\n      \n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@8fcfedf57053e09257688fce7a0beeb18b1b9ae3 # v2.17.2\n      # Override language selection by uncommenting this and choosing your languages\n      # with:\n      #   languages: go, javascript, csharp, python, cpp, java\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    - name: Autobuild\n      uses: github/codeql-action/autobuild@8fcfedf57053e09257688fce7a0beeb18b1b9ae3 # v2.17.2\n\n    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.\n    # üìö https://git.io/JvXDl\n\n    # ‚úèÔ∏è If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@8fcfedf57053e09257688fce7a0beeb18b1b9ae3 # v2.17.2\n"
						}
					},
					{
						"name": "image-reuse.yaml",
						"object": {
							"text": "name: Publish and Sign Container Image\non:\n  workflow_call:\n    inputs:\n      go-version:\n        required: true\n        type: string\n      quay_image_name:\n        required: false\n        type: string\n      ghcr_image_name:\n        required: false\n        type: string\n      docker_image_name:\n        required: false\n        type: string\n      platforms:\n        required: true\n        type: string\n      push:\n        required: true\n        type: boolean\n      target:\n        required: false\n        type: string\n\n    secrets:\n      quay_username:\n        required: false\n      quay_password:\n        required: false\n      ghcr_username:\n        required: false\n      ghcr_password:\n        required: false\n      docker_username:\n        required: false\n      docker_password:\n        required: false\n\n    outputs:\n      image-digest:\n        description: \"sha256 digest of container image\"\n        value: ${{ jobs.publish.outputs.image-digest }}\n\npermissions: {}\n\njobs:\n  publish:\n    permissions:\n      contents: read\n      packages: write # Used to push images to `ghcr.io` if used.\n      id-token: write # Needed to create an OIDC token for keyless signing\n    runs-on: ubuntu-22.04\n    outputs:\n      image-digest: ${{ steps.image.outputs.digest }}\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n        if: ${{ github.ref_type == 'tag'}}\n\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        if: ${{ github.ref_type != 'tag'}}\n\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ inputs.go-version }}\n          cache: false\n\n      - name: Install cosign\n        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2\n\n      - uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0\n      - uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1\n\n      - name: Setup tags for container image as a CSV type\n        run: |\n          IMAGE_TAGS=$(for str in \\\n            ${{ inputs.quay_image_name }} \\\n            ${{ inputs.ghcr_image_name }} \\\n            ${{ inputs.docker_image_name}}; do\n            echo -n \"${str}\",;done | sed 's/,$//')\n\n          echo $IMAGE_TAGS\n          echo \"TAGS=$IMAGE_TAGS\" >> $GITHUB_ENV\n\n      - name: Setup image namespace for signing, strip off the tag\n        run: |\n          TAGS=$(for tag in \\\n            ${{ inputs.quay_image_name }} \\\n            ${{ inputs.ghcr_image_name }} \\\n            ${{ inputs.docker_image_name}}; do\n            echo -n \"${tag}\" | awk -F \":\" '{print $1}' -;done)\n          \n            echo $TAGS\n            echo 'SIGNING_TAGS<<EOF' >> $GITHUB_ENV\n            echo $TAGS >> $GITHUB_ENV\n            echo 'EOF' >> $GITHUB_ENV\n\n      - name: Login to Quay.io\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          registry: quay.io\n          username: ${{ secrets.quay_username }}\n          password: ${{ secrets.quay_password }}\n        if: ${{ inputs.quay_image_name && inputs.push }}\n\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          registry: ghcr.io\n          username: ${{ secrets.ghcr_username }}\n          password: ${{ secrets.ghcr_password }}\n        if: ${{ inputs.ghcr_image_name && inputs.push }}\n\n      - name: Login to dockerhub Container Registry\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          username: ${{ secrets.docker_username }}\n          password: ${{ secrets.docker_password }}\n        if: ${{ inputs.docker_image_name && inputs.push }}\n\n      - name: Set up build args for container image\n        run: |\n            echo \"GIT_TAG=$(if [ -z \"`git status --porcelain`\" ]; then git describe --exact-match --tags HEAD 2>/dev/null; fi)\" >> $GITHUB_ENV\n            echo \"GIT_COMMIT=$(git rev-parse HEAD)\" >> $GITHUB_ENV\n            echo \"BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')\" >> $GITHUB_ENV\n            echo \"GIT_TREE_STATE=$(if [ -z \"`git status --porcelain`\" ]; then echo \"clean\" ; else echo \"dirty\"; fi)\" >> $GITHUB_ENV\n\n      - name: Free Disk Space (Ubuntu)\n        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be\n        with:\n          large-packages: false\n          docker-images: false\n          swap-storage: false\n          tool-cache: false\n\n      - name: Build and push container image\n        id: image\n        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #v6.18.0\n        with:\n          context: .\n          platforms: ${{ inputs.platforms }}\n          push: ${{ inputs.push }}\n          tags: ${{ env.TAGS }}\n          target: ${{ inputs.target }}\n          provenance: false\n          sbom: false\n          build-args: |\n            GIT_TAG=${{env.GIT_TAG}}\n            GIT_COMMIT=${{env.GIT_COMMIT}}\n            BUILD_DATE=${{env.BUILD_DATE}}\n            GIT_TREE_STATE=${{env.GIT_TREE_STATE}}\n\n      - name: Sign container images\n        run: |\n          for signing_tag in $SIGNING_TAGS; do\n            cosign sign \\\n            -a \"repo=${{ github.repository }}\" \\\n            -a \"workflow=${{ github.workflow }}\" \\\n            -a \"sha=${{ github.sha }}\" \\\n            -y \\\n            \"$signing_tag\"@${{ steps.image.outputs.digest }}\n          done\n        if: ${{ inputs.push }}\n"
						}
					},
					{
						"name": "image.yaml",
						"object": {
							"text": "name: Image\n\non:\n  push:\n    branches:\n      - master\n  pull_request:\n    branches:\n      - master\n    types: [labeled, unlabeled, opened, synchronize, reopened]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\npermissions: {}\n\njobs:\n  set-vars:\n    permissions:\n      contents: read\n    if: github.repository == 'argoproj/argo-cd'\n    runs-on: ubuntu-22.04\n    outputs:\n      image-tag: ${{ steps.image.outputs.tag}}\n      platforms: ${{ steps.platforms.outputs.platforms }}\n    steps:\n      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n\n      - name: Set image tag for ghcr\n        run: echo \"tag=$(cat ./VERSION)-${GITHUB_SHA::8}\" >> $GITHUB_OUTPUT\n        id: image\n\n      - name: Determine image platforms to use\n        id: platforms\n        run: |\n          IMAGE_PLATFORMS=linux/amd64\n          if [[ \"${{ github.event_name }}\" == \"push\" || \"${{ contains(github.event.pull_request.labels.*.name, 'test-multi-image') }}\" == \"true\" ]]\n          then\n            IMAGE_PLATFORMS=linux/amd64,linux/arm64,linux/s390x,linux/ppc64le\n          fi\n          echo \"Building image for platforms: $IMAGE_PLATFORMS\"\n          echo \"platforms=$IMAGE_PLATFORMS\" >> $GITHUB_OUTPUT\n\n  build-only:\n    needs: [set-vars]\n    permissions:\n      contents: read\n      packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags\n      id-token: write # for creating OIDC tokens for signing.\n    if: ${{ github.repository == 'argoproj/argo-cd' && github.event_name != 'push' }}\n    uses: ./.github/workflows/image-reuse.yaml\n    with:\n      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)\n      # renovate: datasource=golang-version packageName=golang\n      go-version: 1.25.0\n      platforms: ${{ needs.set-vars.outputs.platforms }}\n      push: false\n\n  build-and-publish:\n    needs: [set-vars]\n    permissions:\n      contents: read\n      packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags\n      id-token: write # for creating OIDC tokens for signing.\n    if: ${{ github.repository == 'argoproj/argo-cd' && github.event_name == 'push' }}\n    uses: ./.github/workflows/image-reuse.yaml\n    with:\n      quay_image_name: quay.io/argoproj/argocd:latest\n      ghcr_image_name: ghcr.io/argoproj/argo-cd/argocd:${{ needs.set-vars.outputs.image-tag }}\n      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)\n      # renovate: datasource=golang-version packageName=golang\n      go-version: 1.25.0\n      platforms: ${{ needs.set-vars.outputs.platforms }}\n      push: true\n    secrets:\n      quay_username: ${{ secrets.RELEASE_QUAY_USERNAME }}\n      quay_password: ${{ secrets.RELEASE_QUAY_TOKEN }}\n      ghcr_username: ${{ github.actor }}\n      ghcr_password: ${{ secrets.GITHUB_TOKEN }}\n\n  build-and-publish-provenance: # Push attestations to GHCR, latest image is polluting quay.io\n    needs:\n      - build-and-publish\n    permissions:\n      actions: read # for detecting the Github Actions environment.\n      id-token: write # for creating OIDC tokens for signing.\n      packages: write # for uploading attestations. (https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#known-issues)\n    if: ${{ github.repository == 'argoproj/argo-cd' && github.event_name == 'push' }}\n    # Must be refernced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0\n    with:\n      image: ghcr.io/argoproj/argo-cd/argocd\n      digest: ${{ needs.build-and-publish.outputs.image-digest }}\n      registry-username: ${{ github.actor }}\n    secrets:\n      registry-password: ${{ secrets.GITHUB_TOKEN }}\n\n  Deploy:\n    needs:\n      - build-and-publish\n      - set-vars\n    permissions:\n      contents: write # for git to push upgrade commit if not already deployed\n      packages: write # for pushing packages to GHCR, which is used by cd.apps.argoproj.io to avoid polluting Quay with tags\n    if: ${{ github.repository == 'argoproj/argo-cd' && github.event_name == 'push' }}\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n      - run: git clone \"https://$TOKEN@github.com/argoproj/argoproj-deployments\"\n        env:\n          TOKEN: ${{ secrets.TOKEN }}\n      - run: |\n          docker run -u $(id -u):$(id -g) -v $(pwd):/src -w /src --rm -t ghcr.io/argoproj/argo-cd/argocd:${{ needs.set-vars.outputs.image-tag }} kustomize edit set image quay.io/argoproj/argocd=ghcr.io/argoproj/argo-cd/argocd:${{ needs.set-vars.outputs.image-tag }}\n          git config --global user.email 'ci@argoproj.com'\n          git config --global user.name 'CI'\n          git diff --exit-code && echo 'Already deployed' || (git commit -am 'Upgrade argocd to ${{ needs.set-vars.outputs.image-tag }}' && git push)\n        working-directory: argoproj-deployments/argocd\n"
						}
					},
					{
						"name": "init-release.yaml",
						"object": {
							"text": "name: Init ArgoCD Release\non:\n  workflow_dispatch:\n    inputs:\n      TARGET_BRANCH:\n        description: 'TARGET_BRANCH to checkout (e.g. release-2.5)'\n        required: true\n        type: string\n\n      TARGET_VERSION:\n        description: 'TARGET_VERSION to build manifests (e.g. 2.5.0-rc1) Note: the `v` prefix is not used'\n        required: true\n        type: string\n\npermissions: {}\n\njobs:\n  prepare-release:\n    permissions:\n      contents: write  # for peter-evans/create-pull-request to create branch\n      pull-requests: write  # for peter-evans/create-pull-request to create a PR\n    name: Automatically generate version and manifests on ${{ inputs.TARGET_BRANCH }}\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694  # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n          ref: ${{ inputs.TARGET_BRANCH }}\n\n      - name: Check if TARGET_VERSION is well formed.\n        run: |\n          set -xue\n          # Target version must not contain 'v' prefix\n          if echo \"${{ inputs.TARGET_VERSION }}\" | grep -e '^v'; then\n            echo \"::error::Target version '${{ inputs.TARGET_VERSION }}' should not begin with a 'v' prefix, refusing to continue.\" >&2\n            exit 1\n          fi\n\n      - name: Create VERSION information\n        run: |\n          set -ue\n          echo \"Bumping version from $(cat VERSION) to ${{ inputs.TARGET_VERSION }}\"\n          echo \"${{ inputs.TARGET_VERSION }}\" > VERSION\n\n        # We install kustomize in the dist directory\n      - name: Add dist to PATH\n        run: |\n          echo \"/home/runner/work/argo-cd/argo-cd/dist\" >> $GITHUB_PATH\n\n      - name: Generate new set of manifests\n        run: |\n          set -ue\n          make install-codegen-tools-local\n          make manifests-local VERSION=${{ inputs.TARGET_VERSION }}\n          git diff\n\n      - name: Generate version compatibility table\n        run: |\n          git stash\n          bash hack/update-supported-versions.sh\n          git add -u .\n          git stash pop\n\n      - name: Create pull request\n        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e  # v7.0.8\n        with:\n          commit-message: \"Bump version to ${{ inputs.TARGET_VERSION }}\"\n          title: \"Bump version to ${{ inputs.TARGET_VERSION }} on ${{ inputs.TARGET_BRANCH }} branch\"\n          body: Updating VERSION and manifests to ${{ inputs.TARGET_VERSION }}\n          branch: update-version\n          branch-suffix: random\n          signoff: true\n          labels: release\n\n\n"
						}
					},
					{
						"name": "pr-title-check.yml",
						"object": {
							"text": "name: \"Lint PR\"\n\non:\n  pull_request_target:\n    types: [opened, edited, reopened, synchronize]\n\n# IMPORTANT: No checkout actions, scripts, or builds should be added to this workflow. Permissions should always be used\n# with extreme caution. https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#pull_request_target\npermissions: {}\n\n# PR updates can happen in quick succession leading to this\n# workflow being trigger a number of times. This limits it\n# to one run per PR.\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.head_ref }}\n  cancel-in-progress: true\n\njobs:\n  validate:\n    permissions:\n      contents: read\n      pull-requests: read\n    name: Validate PR Title\n    runs-on: ubuntu-latest\n    steps:\n      - uses: thehanimo/pr-title-checker@7fbfe05602bdd86f926d3fb3bccb6f3aed43bc70 # v1.4.3\n        with:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          configuration_path: \".github/pr-title-checker-config.json\"\n"
						}
					},
					{
						"name": "release.yaml",
						"object": {
							"text": "name: Publish ArgoCD Release\non:\n  push:\n    tags:\n      - 'v*'\n      - '!v2.4*'\n      - '!v2.5*'\n      - '!v2.6*'\n\npermissions: {}\n\nenv:\n  # renovate: datasource=golang-version packageName=golang\n  GOLANG_VERSION: '1.25.0' # Note: go-version must also be set in job argocd-image.with.go-version\n\njobs:\n  argocd-image:\n    permissions:\n      contents: read\n      id-token: write # for creating OIDC tokens for signing.\n      packages: write # used to push images to `ghcr.io` if used.\n    if: github.repository == 'argoproj/argo-cd'\n    uses: ./.github/workflows/image-reuse.yaml\n    with:\n      quay_image_name: quay.io/argoproj/argocd:${{ github.ref_name }}\n      # Note: cannot use env variables to set go-version (https://docs.github.com/en/actions/using-workflows/reusing-workflows#limitations)\n      # renovate: datasource=golang-version packageName=golang\n      go-version: 1.25.0\n      platforms: linux/amd64,linux/arm64,linux/s390x,linux/ppc64le\n      push: true\n    secrets:\n      quay_username: ${{ secrets.RELEASE_QUAY_USERNAME }}\n      quay_password: ${{ secrets.RELEASE_QUAY_TOKEN }}\n\n  argocd-image-provenance:\n    needs: [argocd-image]\n    permissions:\n      actions: read # for detecting the Github Actions environment.\n      id-token: write # for creating OIDC tokens for signing.\n      packages: write # for uploading attestations. (https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#known-issues)\n    # Must be refernced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator\n    if: github.repository == 'argoproj/argo-cd'\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0\n    with:\n      image: quay.io/argoproj/argocd\n      digest: ${{ needs.argocd-image.outputs.image-digest }}\n    secrets:\n      registry-username: ${{ secrets.RELEASE_QUAY_USERNAME }}\n      registry-password: ${{ secrets.RELEASE_QUAY_TOKEN }}\n\n  goreleaser:\n    needs:\n      - argocd-image\n      - argocd-image-provenance\n    permissions:\n      contents: write # used for uploading assets\n    if: github.repository == 'argoproj/argo-cd'\n    runs-on: ubuntu-22.04\n    outputs:\n      hashes: ${{ steps.hash.outputs.hashes }}\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Fetch all tags\n        run: git fetch --force --tags\n\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n          cache: false\n\n      - name: Set GORELEASER_PREVIOUS_TAG # Workaround, GoReleaser uses 'git-describe' to determine a previous tag. Our tags are created in release branches.\n        run: |\n          set -xue\n          GORELEASER_PREVIOUS_TAG=$(go run hack/get-previous-release/get-previous-version-for-release-notes.go ${{ github.ref_name }}) || exit 1\n          echo \"GORELEASER_PREVIOUS_TAG=$GORELEASER_PREVIOUS_TAG\" >> $GITHUB_ENV\n\n      - name: Set environment variables for ldflags\n        id: set_ldflag\n        run: |\n          echo \"KUBECTL_VERSION=$(go list -m k8s.io/client-go | head -n 1 | rev | cut -d' ' -f1 | rev)\" >> $GITHUB_ENV\n          echo \"GIT_TREE_STATE=$(if [ -z \"`git status --porcelain`\" ]; then echo \"clean\" ; else echo \"dirty\"; fi)\" >> $GITHUB_ENV\n\n      - name: Free Disk Space (Ubuntu)\n        uses: jlumbroso/free-disk-space@54081f138730dfa15788a46383842cd2f914a1be\n        with:\n          large-packages: false\n          docker-images: false\n          swap-storage: false\n          tool-cache: false\n\n      - name: Run GoReleaser\n        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0\n        id: run-goreleaser\n        with:\n          version: latest\n          args: release --clean --timeout 55m\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          KUBECTL_VERSION: ${{ env.KUBECTL_VERSION }}\n          GIT_TREE_STATE: ${{ env.GIT_TREE_STATE }}\n\n      - name: Generate subject for provenance\n        id: hash\n        env:\n          ARTIFACTS: '${{ steps.run-goreleaser.outputs.artifacts }}'\n        run: |\n          set -euo pipefail\n\n          hashes=$(echo $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          if test \"$hashes\" = \"\"; then # goreleaser < v1.13.0\n            checksum_file=$(echo \"$ARTIFACTS\" | jq -r '.[] | select (.type==\"Checksum\") | .path')\n            hashes=$(cat $checksum_file | base64 -w0)\n          fi\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n  goreleaser-provenance:\n    needs: [goreleaser]\n    permissions:\n      actions: read # for detecting the Github Actions environment\n      id-token: write # Needed for provenance signing and ID\n      contents: write #  Needed for release uploads\n    if: github.repository == 'argoproj/argo-cd'\n    # Must be refernced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0\n    with:\n      base64-subjects: '${{ needs.goreleaser.outputs.hashes }}'\n      provenance-name: 'argocd-cli.intoto.jsonl'\n      upload-assets: true\n\n  generate-sbom:\n    name: Create SBOM and generate hash\n    needs:\n      - argocd-image\n      - goreleaser\n    permissions:\n      contents: write # Needed for release uploads\n    outputs:\n      hashes: ${{ steps.sbom-hash.outputs.hashes}}\n    if: github.repository == 'argoproj/argo-cd'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Setup Golang\n        uses: actions/setup-go@44694675825211faa026b3c33043df3e48a5fa00 # v6.0.0\n        with:\n          go-version: ${{ env.GOLANG_VERSION }}\n          cache: false\n\n      - name: Generate SBOM (spdx)\n        id: spdx-builder\n        env:\n          # defines the spdx/spdx-sbom-generator version to use.\n          SPDX_GEN_VERSION: v0.0.13\n          # defines the sigs.k8s.io/bom version to use.\n          SIGS_BOM_VERSION: v0.2.1\n          # comma delimited list of project relative folders to inspect for package\n          # managers (gomod, yarn, npm).\n          PROJECT_FOLDERS: '.,./ui'\n          # full qualified name of the docker image to be inspected\n          DOCKER_IMAGE: quay.io/argoproj/argocd:${{ github.ref_name }}\n        run: |\n          yarn install --cwd ./ui\n          go install github.com/spdx/spdx-sbom-generator/cmd/generator@$SPDX_GEN_VERSION\n          go install sigs.k8s.io/bom/cmd/bom@$SIGS_BOM_VERSION\n\n          # Generate SPDX for project dependencies analyzing package managers\n          for folder in $(echo $PROJECT_FOLDERS | sed \"s/,/ /g\")\n          do\n            generator -p $folder -o /tmp\n          done\n\n          # Generate SPDX for binaries analyzing the docker image\n          if [[ ! -z $DOCKER_IMAGE ]]; then\n            bom generate -o /tmp/bom-docker-image.spdx -i $DOCKER_IMAGE\n          fi\n\n          cd /tmp && tar -zcf sbom.tar.gz *.spdx\n\n      - name: Generate SBOM hash\n        shell: bash\n        id: sbom-hash\n        run: |\n          # sha256sum generates sha256 hash for sbom.\n          # base64 -w0 encodes to base64 and outputs on a single line.\n          # sha256sum /tmp/sbom.tar.gz ... | base64 -w0\n          echo \"hashes=$(sha256sum /tmp/sbom.tar.gz | base64 -w0)\" >> \"$GITHUB_OUTPUT\"\n\n      - name: Upload SBOM\n        uses: softprops/action-gh-release@6cbd405e2c4e67a21c47fa9e383d020e4e28b836 # v2.3.3\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        with:\n          files: |\n            /tmp/sbom.tar.gz\n\n  sbom-provenance:\n    needs: [generate-sbom]\n    permissions:\n      actions: read # for detecting the Github Actions environment\n      id-token: write # Needed for provenance signing and ID\n      contents: write #  Needed for release uploads\n    if: github.repository == 'argoproj/argo-cd'\n    # Must be referenced by a tag. https://github.com/slsa-framework/slsa-github-generator/blob/main/internal/builders/container/README.md#referencing-the-slsa-generator\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0\n    with:\n      base64-subjects: '${{ needs.generate-sbom.outputs.hashes }}'\n      provenance-name: 'argocd-sbom.intoto.jsonl'\n      upload-assets: true\n\n  post-release:\n    needs:\n      - argocd-image\n      - goreleaser\n      - generate-sbom\n    permissions:\n      contents: write # Needed to push commit to update stable tag\n      pull-requests: write # Needed to create PR for VERSION update.\n    if: github.repository == 'argoproj/argo-cd'\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          fetch-depth: 0\n          token: ${{ secrets.GITHUB_TOKEN }}\n\n      - name: Setup Git author information\n        run: |\n          set -ue\n          git config --global user.email 'ci@argoproj.com'\n          git config --global user.name 'CI'\n\n      - name: Check if tag is the latest version and not a pre-release\n        run: |\n          set -xue\n          # Fetch all tag information\n          git fetch --prune --tags --force\n\n          LATEST_TAG=$(git -c 'versionsort.suffix=-rc' tag --list --sort=version:refname | tail -n1)\n\n          PRE_RELEASE=false\n          # Check if latest tag is a pre-release\n          if echo $LATEST_TAG | grep -E -- '-rc[0-9]+$';then\n            PRE_RELEASE=true\n          fi\n\n          # Ensure latest tag matches github.ref_name & not a pre-release\n          if [[ $LATEST_TAG == ${{ github.ref_name }} ]] && [[ $PRE_RELEASE != 'true' ]];then\n            echo \"TAG_STABLE=true\" >> $GITHUB_ENV\n          else\n            echo \"TAG_STABLE=false\" >> $GITHUB_ENV\n          fi\n\n      - name: Update stable tag to latest version\n        run: |\n          git tag -f stable ${{ github.ref_name }}\n          git push -f origin stable\n        if: ${{ env.TAG_STABLE == 'true' }}\n\n      - name: Check to see if VERSION should be updated on master branch\n        run: |\n          set -xue\n          SOURCE_TAG=${{ github.ref_name }}\n          VERSION_REF=\"${SOURCE_TAG#*v}\"\n          COMMIT_HASH=$(git rev-parse HEAD)\n          if echo \"$VERSION_REF\" | grep -E -- '^[0-9]+\\.[0-9]+\\.0-rc1';then\n            VERSION=$(awk 'BEGIN {FS=OFS=\".\"} {$2++; print}' <<< \"${VERSION_REF%-rc1}\")\n            echo \"Updating VERSION to: $VERSION\"\n            echo \"UPDATE_VERSION=true\" >> $GITHUB_ENV\n            echo \"NEW_VERSION=$VERSION\" >> $GITHUB_ENV\n            echo \"COMMIT_HASH=$COMMIT_HASH\" >> $GITHUB_ENV\n          else\n            echo \"Not updating VERSION\"\n            echo \"UPDATE_VERSION=false\" >> $GITHUB_ENV\n          fi\n\n      - name: Update VERSION on master branch\n        run: |\n          echo ${{ env.NEW_VERSION }} > VERSION\n          # Replace the 'project-release: vX.X.X-rcX' line in SECURITY-INSIGHTS.yml\n          sed -i \"s/project-release: v.*$/project-release: v${{ env.NEW_VERSION }}/\" SECURITY-INSIGHTS.yml\n          # Update the 'commit-hash: XXXXXXX' line in SECURITY-INSIGHTS.yml\n          sed -i \"s/commit-hash: .*/commit-hash: ${{ env.COMMIT_HASH }}/\" SECURITY-INSIGHTS.yml\n        if: ${{ env.UPDATE_VERSION == 'true' }}\n\n      - name: Create PR to update VERSION on master branch\n        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8\n        with:\n          commit-message: Bump version in master\n          title: 'chore: Bump version in master'\n          body: All images built from master should indicate which version we are on track for.\n          signoff: true\n          branch: update-version\n          branch-suffix: random\n          base: master\n        if: ${{ env.UPDATE_VERSION == 'true' }}\n"
						}
					},
					{
						"name": "renovate.yaml",
						"object": {
							"text": "name: Renovate\non:\n  schedule:\n    - cron: '0 * * * *'\n  workflow_dispatch: {}\n\npermissions:\n  contents: read\n\njobs:\n  renovate:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Get token\n        id: get_token\n        uses: actions/create-github-app-token@d72941d797fd3113feb6b93fd0dec494b13a2547 # v1\n        with:\n          app-id: ${{ vars.RENOVATE_APP_ID }}\n          private-key: ${{ secrets.RENOVATE_APP_PRIVATE_KEY }}\n\n      - name: Checkout\n        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # 4.2.2\n\n      - name: Self-hosted Renovate\n        uses: renovatebot/github-action@6927a58a017ee9ac468a34a5b0d2a9a9bd45cac3 #43.0.11\n        with:\n          configurationFile: .github/configs/renovate-config.js\n          token: '${{ steps.get_token.outputs.token }}'\n        env:\n          LOG_LEVEL: 'debug'\n          RENOVATE_REPOSITORIES: '${{ github.repository }}'\n"
						}
					},
					{
						"name": "scorecard.yaml",
						"object": {
							"text": "name: Scorecards supply-chain security\non:\n  # Only the default branch is supported.\n  branch_protection_rule:\n  schedule:\n    - cron: \"39 9 * * 2\"\n  push:\n    branches: [\"master\"]\n\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\n# Declare default permissions as read only.\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecards analysis\n    runs-on: ubuntu-22.04\n    permissions:\n      # Needed to upload the results to code-scanning dashboard.\n      security-events: write\n      # Used to receive a badge. (Upcoming feature)\n      id-token: write\n      # Needs for private repositories.\n      contents: read\n      actions: read\n    if: github.repository == 'argoproj/argo-cd'\n\n    steps:\n      - name: \"Checkout code\"\n        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1\n        with:\n          persist-credentials: false\n\n      - name: \"Run analysis\"\n        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # (Optional) Read-only PAT token. Uncomment the `repo_token` line below if:\n          # - you want to enable the Branch-Protection check on a *public* repository, or\n          # - you are installing Scorecards on a *private* repository\n          # To create the PAT, follow the steps in https://github.com/ossf/scorecard-action#authentication-with-pat.\n          # repo_token: ${{ secrets.SCORECARD_READ_TOKEN }}\n\n          # Publish the results for public repositories to enable scorecard badges. For more details, see\n          # https://github.com/ossf/scorecard-action#publishing-results.\n          # For private repositories, `publish_results` will automatically be set to `false`, regardless\n          # of the value entered here.\n          publish_results: true\n\n      # Upload the results as artifacts (optional). Commenting out will disable uploads of run results in SARIF\n      # format to the repository Actions tab.\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n\n      # Upload the results to GitHub's code scanning dashboard.\n      - name: \"Upload to code-scanning\"\n        uses: github/codeql-action/upload-sarif@8fcfedf57053e09257688fce7a0beeb18b1b9ae3 # v2.17.2\n        with:\n          sarif_file: results.sarif\n"
						}
					},
					{
						"name": "update-snyk.yaml",
						"object": {
							"text": "name: Snyk report update\non:\n  workflow_dispatch: {}\n  schedule:\n    - cron: '0 0 * * 0' # midnight every Sunday\n\npermissions:\n  contents: read\n\njobs:\n  snyk-report:\n    permissions:\n      contents: write\n      pull-requests: write\n    if: github.repository == 'argoproj/argo-cd'\n    name: Update Snyk report in the docs directory\n    runs-on: ubuntu-22.04\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@8410ad0602e1e429cee44a835ae9f77f654a6694 # v4.0.0\n        with:\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - name: Build reports\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}\n        run: |\n          make snyk-report\n          pr_branch=\"snyk-update-$(echo $RANDOM | md5sum | head -c 20)\"\n          git checkout -b \"$pr_branch\"\n          git config --global user.email 'ci@argoproj.com'\n          git config --global user.name 'CI'\n          git add docs/snyk\n          git commit -m \"[Bot] docs: Update Snyk reports\" --signoff\n          git push --set-upstream origin \"$pr_branch\"\n          gh pr create -B master -H \"$pr_branch\" --title '[Bot] docs: Update Snyk report' --body ''\n"
						}
					}
				]
			}
		}
	}
}