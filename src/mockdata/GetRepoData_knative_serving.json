{
	"data": {
		"repository": {
			"name": "serving",
			"nameWithOwner": "knative/serving",
			"url": "https://github.com/knative/serving",
			"description": "Kubernetes-based, scale-to-zero, request-driven compute",
			"releases": {
				"nodes": [
					{
						"name": "v0.1.0",
						"tagName": "v0.1.0",
						"url": "https://github.com/knative/serving/releases/tag/v0.1.0",
						"createdAt": "2018-07-17T04:56:30Z",
						"releaseAssets": {
							"nodes": [
								{
									"name": "release-lite.yaml",
									"downloadUrl": "https://github.com/knative/serving/releases/download/v0.1.0/release-lite.yaml"
								},
								{
									"name": "release-no-mon.yaml",
									"downloadUrl": "https://github.com/knative/serving/releases/download/v0.1.0/release-no-mon.yaml"
								},
								{
									"name": "release.yaml",
									"downloadUrl": "https://github.com/knative/serving/releases/download/v0.1.0/release.yaml"
								}
							]
						}
					}
				]
			},
			"workflows": {
				"entries": [
					{
						"name": "kind-e2e.yaml",
						"object": {
							"text": "name: e2e\n\non:\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\ndefaults:\n  run:\n    shell: bash\n\nenv:\n  # https://github.com/google/go-containerregistry/pull/125 allows insecure registry for\n  # '*.local' hostnames. This works both for `ko` and our own tag-to-digest resolution logic,\n  # thus allowing us to test without bypassing tag-to-digest resolution.\n  CLUSTER_DOMAIN: c${{ github.run_id }}.local\n  REGISTRY_NAME: registry.local\n  REGISTRY_PORT: 5000\n  KO_DOCKER_REPO: registry.local:5000/knative\n  GOTESTSUM_VERSION: 1.12.0\n  KO_FLAGS: --platform=linux/amd64\n  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n\n    - name: setup-go\n      uses: knative/actions/setup-go@main\n\n    - name: Setup Cache Directories\n      run: |\n        mkdir -p ~/artifacts/build\n        mkdir -p ~/artifacts/registry\n\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: |\n          ~/.cache/go-build\n           ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n        restore-keys: |\n          ${{ runner.os }}-go-\n\n    # Install the latest release of ko\n    - name: Install ko\n      uses: ko-build/setup-ko@d006021bd0c28d1ce33a07e7943d48b079944c8d # v0.9\n\n    - name: Setup Registry\n      run: |\n        docker run -d --restart=always \\\n          -p $REGISTRY_PORT:$REGISTRY_PORT \\\n          -v ~/artifacts/registry:/var/lib/registry \\\n          --name $REGISTRY_NAME registry:2\n\n        # Make the $REGISTRY_NAME -> 127.0.0.1, to tell `ko` to publish to\n        # local reigstry, even when pushing $REGISTRY_NAME:$REGISTRY_PORT/some/image\n        sudo echo \"127.0.0.1 $REGISTRY_NAME\" | sudo tee -a /etc/hosts\n\n    - name: Build Knative\n      run: |\n        export YAML_OUTPUT_DIR=$HOME/artifacts/build\n        ./hack/generate-yamls.sh \"$GITHUB_WORKSPACE\" \"$(mktemp)\" $YAML_OUTPUT_DIR/env\n\n    - name: Build Test Images\n      run: |\n        ./test/upload-test-images.sh\n\n    - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n      with:\n        name: artifacts\n        path: ~/artifacts\n        retention-days: 1\n\n  test:\n    name: test\n    needs: build\n    runs-on: ubuntu-latest\n    strategy:\n      fail-fast: false # Keep running if one leg fails.\n      matrix:\n        k8s-version:\n        - v1.32.x\n        - v1.33.x\n\n        ingress:\n        - kourier\n        - kourier-tls\n        - istio\n        - istio-tls\n        # Disabled due to flakiness: https://github.com/knative/serving/issues/14637\n        # - istio-ambient\n        - contour\n        - gateway_istio\n        - gateway_contour\n\n        test-suite:\n        - runtime\n        - api\n        - e2e\n\n        include:\n        - ingress: gateway_istio\n          ingress-class: gateway-api\n          test-flags: -enable-alpha -enable-beta\n          namespace-resources: httproute\n\n        - ingress: gateway_contour\n          ingress-class: gateway-api\n          gateway-api-implementation: contour\n          test-flags: -enable-alpha -enable-beta\n          namespace-resources: httproute\n\n        - ingress: contour\n          namespace-resources: httpproxy\n\n        - ingress: istio\n          namespace-resources: virtualservices\n\n        - ingress: istio-tls\n          ingress-class: istio\n          namespace-resources: virtualservices\n          enable-tls: 1\n\n        # Disabled due to flakiness: https://github.com/knative/serving/issues/14637\n        # - ingress: istio-ambient\n        #   namespace-resources: virtualservices\n        #   ingress-class: istio\n        #   ambient: 1\n\n        - ingress: kourier-tls\n          ingress-class: kourier\n          enable-tls: 1\n\n        - test-suite: runtime\n          test-path: ./test/conformance/runtime/...\n\n        - test-suite: api\n          test-path: ./test/conformance/api/...\n\n        - test-suite: e2e\n          test-path: ./test/e2e\n\n    env:\n      KIND: 1\n      INGRESS_CLASS: ${{ matrix.ingress-class || matrix.ingress }}.ingress.networking.knative.dev\n      GATEWAY_API_IMPLEMENTATION: ${{ matrix.gateway-api-implementation }}\n      ENABLE_TLS: ${{ matrix.enable-tls || 0 }}\n      # Disabled due to flakiness: https://github.com/knative/serving/issues/14637\n      # AMBIENT: ${{ matrix.ambient || 0 }}\n\n    steps:\n    - name: setup-go\n      uses: knative/actions/setup-go@main\n\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: |\n          ~/.cache/go-build\n           ~/go/pkg/mod\n        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}\n        restore-keys: |\n          ${{ runner.os }}-go-\n\n    - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0\n      with:\n        name: artifacts\n        path: ~/artifacts\n\n    - name: setup kind\n      uses: chainguard-dev/actions/setup-kind@3caedd3784c809ba873cbb8c6a12e2bc6bf6ab09 # main\n      with:\n        k8s-version: ${{ matrix.k8s-version }}\n        kind-worker-count: 4\n        cluster-suffix: c${{ github.run_id }}.local\n        registry-volume: $HOME/artifacts/registry\n\n    - name: Install Dependencies\n      run: |\n        set -x\n        echo \"::group:: install gotestsum ${GOTESTSUM_VERSION}\"\n        curl -L https://github.com/gotestyourself/gotestsum/releases/download/v${GOTESTSUM_VERSION}/gotestsum_${GOTESTSUM_VERSION}_linux_amd64.tar.gz | tar xzf - gotestsum\n        chmod +x ./gotestsum\n        sudo mv gotestsum /usr/local/bin\n        echo \"::endgroup::\"\n\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        fetch-depth: 0\n\n    - name: Install Serving & Ingress\n      run: |\n        set -x\n        # Remove chaosduck since we don't use it and it'll skip the build\n        rm ./test/config/chaosduck/chaosduck.yaml\n\n        source ./test/e2e-common.sh\n\n        export INSTALL_CUSTOM_YAMLS=$HOME/artifacts/build/env\n        knative_setup\n\n        # Run the tests tagged as e2e on the KinD cluster.\n        echo \"SYSTEM_NAMESPACE=$SYSTEM_NAMESPACE\" >> $GITHUB_ENV\n        echo \"GATEWAY_OVERRIDE=$GATEWAY_OVERRIDE\" >> $GITHUB_ENV\n        echo \"GATEWAY_NAMESPACE_OVERRIDE=$GATEWAY_NAMESPACE_OVERRIDE\" >> $GITHUB_ENV\n        echo \"CA_CERT=$CA_CERT\" >> $GITHUB_ENV\n        echo \"SERVER_NAME=$SERVER_NAME\" >> $GITHUB_ENV\n\n    - name: Test ${{ matrix.test-suite }}\n      run: |\n        gotestsum --format testname -- \\\n          -race -count=1 -parallel=1 -tags=e2e \\\n          -timeout=30m \\\n          ${{ matrix.test-path }} \\\n          -skip-cleanup-on-fail \\\n          -disable-logstream \\\n          -enable-alpha -enable-beta \\\n          --ingress-class=${{ matrix.ingress-class || matrix.ingress }}.ingress.networking.knative.dev \\\n          ${{ matrix.test-flags }}\n\n    - uses: chainguard-dev/actions/kind-diag@3caedd3784c809ba873cbb8c6a12e2bc6bf6ab09 # main\n      # Only upload logs on failure.\n      if: ${{ failure() }}\n      with:\n        cluster-resources: nodes,namespaces,crds\n        namespace-resources: configmaps,pods,svc,ksvc,route,configuration,revision,king,${{ matrix.namespace-resources || '' }}\n        artifact-name: logs-${{ matrix.k8s-version}}-${{ matrix.ingress }}-${{ matrix.test-suite }}\n"
						}
					},
					{
						"name": "knative-go-build.yaml",
						"object": {
							"text": "# Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-extensions/knobots\n\nname: Build\n\non:\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n  build:\n    uses: knative/actions/.github/workflows/reusable-go-build.yaml@main\n"
						}
					},
					{
						"name": "knative-go-test.yaml",
						"object": {
							"text": "# Copyright 2022 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-extensions/knobots\n\nname: Test\n\non:\n  push:\n    branches: [ 'main', 'release-*' ]\n\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n  test:\n    uses: knative/actions/.github/workflows/reusable-go-test.yaml@main\n    secrets:\n      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}\n"
						}
					},
					{
						"name": "knative-security.yaml",
						"object": {
							"text": "# Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-extensions/knobots\n\nname: 'Security'\n\non:\n  push:\n    branches: [ 'main', 'release-*' ]\n\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n  analyze:\n    uses: knative/actions/.github/workflows/reusable-security.yaml@main\n"
						}
					},
					{
						"name": "knative-stale.yaml",
						"object": {
							"text": "# Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-extensions/knobots\nname: 'Close stale'\n\non:\n  schedule:\n  - cron: '0 1 * * *'\n\njobs:\n\n  stale:\n    uses: knative/actions/.github/workflows/reusable-stale.yaml@main\n"
						}
					},
					{
						"name": "knative-style.yaml",
						"object": {
							"text": "# Copyright 2020 The Knative Authors.\n# SPDX-License-Identifier: Apache-2.0\n\n# This file is automagically synced here from github.com/knative-extensions/knobots\n\nname: Code Style\n\non:\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n\n  style:\n    uses: knative/actions/.github/workflows/reusable-style.yaml@main\n"
						}
					},
					{
						"name": "knative-verify.yaml",
						"object": {
							"text": "# Copyright 2020 The Knative Authors.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# This file is automagically synced here from github.com/knative-extensions/.github\n# repo by knobots: https://github.com/knative-extensions/knobots and will be overwritten.\n\nname: Verify\n\non:\n  pull_request:\n    branches: [ 'main', 'release-*' ]\n\njobs:\n  verify:\n    uses: knative/actions/.github/workflows/reusable-verify-codegen.yaml@main\n"
						}
					},
					{
						"name": "pr-gh-workflow-approve.yaml",
						"object": {
							"text": "name: PR approve GH Workflows\n\non:\n  pull_request_target:\n    types:\n      - edited\n      - labeled\n      - reopened\n      - synchronize\n\npermissions: {}\n\njobs:\n  approve:\n    name: Approve ok-to-test\n    if: contains(github.event.pull_request.labels.*.name, 'ok-to-test')\n    runs-on: ubuntu-latest\n    permissions:\n      actions: write\n    steps:\n      - name: Update PR\n        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1\n        continue-on-error: true\n        with:\n          github-token: ${{ secrets.GITHUB_TOKEN }}\n          script: |\n            const result = await github.rest.actions.listWorkflowRunsForRepo({\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              event: \"pull_request\",\n              status: \"action_required\",\n              head_sha: context.payload.pull_request.head.sha,\n              per_page: 100\n            });\n\n            for (var run of result.data.workflow_runs) {\n              await github.rest.actions.approveWorkflowRun({\n                owner: context.repo.owner,\n                repo: context.repo.repo,\n                run_id: run.id\n              });\n            }\n"
						}
					}
				]
			}
		}
	}
}