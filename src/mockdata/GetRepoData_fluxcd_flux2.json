{
	"data": {
		"repository": {
			"name": "flux2",
			"nameWithOwner": "fluxcd/flux2",
			"url": "https://github.com/fluxcd/flux2",
			"description": "Open and extensible continuous delivery solution for Kubernetes. Powered by GitOps Toolkit.",
			"releases": {
				"nodes": [
					{
						"name": "v0.0.1-alpha.1",
						"tagName": "v0.0.1-alpha.1",
						"url": "https://github.com/fluxcd/flux2/releases/tag/v0.0.1-alpha.1",
						"createdAt": "2020-05-06T11:28:59Z",
						"releaseAssets": {
							"nodes": [
								{
									"name": "toolkit_0.0.1-alpha.1_checksums.txt",
									"downloadUrl": "https://github.com/fluxcd/flux2/releases/download/v0.0.1-alpha.1/toolkit_0.0.1-alpha.1_checksums.txt"
								},
								{
									"name": "tk_0.0.1-alpha.1_linux_amd64.tar.gz",
									"downloadUrl": "https://github.com/fluxcd/flux2/releases/download/v0.0.1-alpha.1/tk_0.0.1-alpha.1_linux_amd64.tar.gz"
								},
								{
									"name": "tk_0.0.1-alpha.1_darwin_amd64.tar.gz",
									"downloadUrl": "https://github.com/fluxcd/flux2/releases/download/v0.0.1-alpha.1/tk_0.0.1-alpha.1_darwin_amd64.tar.gz"
								}
							]
						}
					}
				]
			},
			"workflows": {
				"entries": [
					{
						"name": "README.md",
						"object": {
							"text": "# Flux GitHub Workflows\n\n## End-to-end Testing\n\nThe e2e workflows run a series of tests to ensure that the Flux CLI and\nthe GitOps Toolkit controllers work well all together.\nThe tests are written in Go, Bash, Make and Terraform.\n\n| Workflow           | Jobs                 | Runner         | Role                                          |\n|--------------------|----------------------|----------------|-----------------------------------------------|\n| e2e.yaml           | e2e-amd64-kubernetes | GitHub Ubuntu  | integration testing with Kubernetes Kind<br/> |\n| e2e-arm64.yaml     | e2e-arm64-kubernetes | Equinix Ubuntu | integration testing with Kubernetes Kind<br/> |\n| e2e-bootstrap.yaml | e2e-boostrap-github  | GitHub Ubuntu  | integration testing with GitHub API<br/>      |\n| e2e-azure.yaml     | e2e-amd64-aks        | GitHub Ubuntu  | integration testing with Azure API<br/>       |\n| scan.yaml          | scan-fossa           | GitHub Ubuntu  | license scanning<br/>                         |\n| scan.yaml          | scan-snyk            | GitHub Ubuntu  | vulnerability scanning<br/>                   |\n| scan.yaml          | scan-codeql          | GitHub Ubuntu  | vulnerability scanning<br/>                   |\n\n## Components Update\n\nThe components update workflow scans the GitOps Toolkit controller repositories for new releases,\namd when it finds a new controller version, the workflow performs the following steps:\n- Updates the controller API package version in `go.mod`.\n- Patches the controller CRDs version in the `manifests/crds` overlay.\n- Patches the controller Deployment version in `manifests/bases` overlay.\n- Opens a Pull Request against the `main` branch.\n- Triggers the e2e test suite to run for the opened PR.\n\n\n| Workflow    | Jobs              | Runner        | Role                                                |\n|-------------|-------------------|---------------|-----------------------------------------------------|\n| update.yaml | update-components | GitHub Ubuntu | update the GitOps Toolkit APIs and controllers<br/> |\n\n## Release\n\nThe release workflow is triggered by a semver Git tag and performs the following steps:\n- Generates the Flux install manifests (YAML).\n- Generates the OpenAPI validation schemas for the GitOps Toolkit CRDs (JSON).\n- Generates a Software Bill of Materials (SPDX JSON).\n- Builds the Flux CLI binaries and the multi-arch container images.\n- Pushes the container images to GitHub Container Registry and DockerHub.\n- Signs the sbom, the binaries checksum and the container images with Cosign and GitHub OIDC.\n- Uploads the sbom, binaries, checksums and install manifests to GitHub Releases.\n- Pushes the install manifests as OCI artifacts to GitHub Container Registry and DockerHub.\n- Signs the OCI artifacts with Cosign and GitHub OIDC.\n\n| Workflow     | Jobs                   | Runner        | Role                                                 |\n|--------------|------------------------|---------------|------------------------------------------------------|\n| release.yaml | release-flux-cli       | GitHub Ubuntu | build, push and sign the CLI release artifacts<br/>  |\n| release.yaml | release-flux-manifests | GitHub Ubuntu | build, push and sign the Flux install manifests<br/> |\n"
						}
					},
					{
						"name": "action.yaml",
						"object": {
							"text": "name: test-gh-action\n\non:\n  pull_request:\n    paths:\n      - 'action/**'\n  push:\n    paths:\n      - 'action/**'\n    branches:\n      - 'main'\n      - 'release/**'\n\npermissions: read-all\n\njobs:\n  actions:\n    strategy:\n      fail-fast: false\n      matrix:\n        version: [ubuntu-latest, macos-latest, windows-latest]\n\n    runs-on: ${{ matrix.version }}\n    name: action on ${{ matrix.version }}\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup flux\n        uses: ./action\n"
						}
					},
					{
						"name": "backport.yaml",
						"object": {
							"text": "name: backport\n\non:\n  pull_request_target:\n    types: [closed, labeled]\n\npermissions: \n  contents: read\n\njobs:\n  pull-request:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n    if: github.event.pull_request.state == 'closed' && github.event.pull_request.merged && (github.event_name != 'labeled' || startsWith('backport:', github.event.label.name))\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n        with:\n          ref: ${{ github.event.pull_request.head.sha }}\n      - name: Create backport PRs\n        uses: korthout/backport-action@ca4972adce8039ff995e618f5fc02d1b7961f27a # v3.3.0\n        # xref: https://github.com/korthout/backport-action#inputs\n        with:\n          # Use token to allow workflows to be triggered for the created PR\n          github_token: ${{ secrets.BOT_GITHUB_TOKEN }}\n          # Match labels with a pattern `backport:<target-branch>`\n          label_pattern: '^backport:([^ ]+)$'\n          # A bit shorter pull-request title than the default\n          pull_title: '[${target_branch}] ${pull_title}'\n          # Simpler PR description than default\n          pull_description: |-\n            Automated backport to `${target_branch}`, triggered by a label in #${pull_number}.\n"
						}
					},
					{
						"name": "conformance.yaml",
						"object": {
							"text": "name: conformance\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ 'main', 'update-components', 'release/**', 'conform*' ]\n\npermissions:\n  contents: read\n\nenv:\n  GO_VERSION: 1.25.x\n\njobs:\n  conform-kubernetes:\n    runs-on:\n      group: \"ARM64\"\n    strategy:\n      matrix:\n        # Keep this list up-to-date with https://endoflife.date/kubernetes\n        # Build images with https://github.com/fluxcd/flux-benchmark/actions/workflows/build-kind.yaml\n        KUBERNETES_VERSION: [1.31.5, 1.32.1, 1.33.0, 1.34.0]\n      fail-fast: false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Prepare\n        id: prep\n        run: |\n          ID=${GITHUB_SHA:0:7}-${{ matrix.KUBERNETES_VERSION }}-$(date +%s)\n          echo \"CLUSTER=arm64-${ID}\" >> $GITHUB_OUTPUT\n      - name: Build\n        run: |\n          make build\n      - name: Setup Kubernetes\n        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0\n        with:\n          version: v0.27.0\n          cluster_name: ${{ steps.prep.outputs.CLUSTER }}\n          node_image: ghcr.io/fluxcd/kindest/node:v${{ matrix.KUBERNETES_VERSION }}-arm64\n      - name: Run e2e tests\n        run: TEST_KUBECONFIG=$HOME/.kube/config make e2e\n      - name: Run multi-tenancy tests\n        run: |\n          ./bin/flux install\n          ./bin/flux create source git flux-system \\\n          --interval=15m \\\n          --url=https://github.com/fluxcd/flux2-multi-tenancy \\\n          --branch=main \\\n          --ignore-paths=\"./clusters/**/flux-system/\"\n          ./bin/flux create kustomization flux-system \\\n          --interval=15m \\\n          --source=flux-system \\\n          --path=./clusters/staging\n          kubectl -n flux-system wait kustomization/tenants --for=condition=ready --timeout=5m\n          kubectl -n apps wait kustomization/dev-team --for=condition=ready --timeout=1m\n          kubectl -n apps wait helmrelease/podinfo --for=condition=ready --timeout=1m\n      - name: Debug failure\n        if: failure()\n        run: |\n          kubectl -n flux-system get all\n          kubectl -n flux-system describe po \n          kubectl -n flux-system logs deploy/source-controller\n          kubectl -n flux-system logs deploy/kustomize-controller\n\n  conform-k3s:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # Keep this list up-to-date with https://endoflife.date/kubernetes\n        # Available versions can be found with \"replicated cluster versions\"\n        K3S_VERSION: [ 1.31.8, 1.32.4, 1.33.0 ]\n      fail-fast: false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Prepare\n        id: prep\n        run: |\n          ID=${GITHUB_SHA:0:7}-${{ matrix.K3S_VERSION }}-$(date +%s)\n          PSEUDO_RAND_SUFFIX=$(echo \"${ID}\" | shasum | awk '{print $1}')\n          echo \"cluster=flux2-k3s-${PSEUDO_RAND_SUFFIX}\" >> $GITHUB_OUTPUT\n          KUBECONFIG_PATH=\"$(git rev-parse --show-toplevel)/bin/kubeconfig.yaml\"\n          echo \"kubeconfig-path=${KUBECONFIG_PATH}\" >> $GITHUB_OUTPUT\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Build\n        run: make build-dev\n      - name: Create repository\n        run: |\n          gh repo create --private --add-readme fluxcd-testing/${{ steps.prep.outputs.cluster }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: Create cluster\n        id: create-cluster\n        uses: replicatedhq/replicated-actions/create-cluster@49b440dabd7e0e868cbbabda5cfc0d8332a279fa # v1.19.0\n        with:\n          api-token: ${{ secrets.REPLICATED_API_TOKEN }}\n          kubernetes-distribution: \"k3s\"\n          kubernetes-version: ${{ matrix.K3S_VERSION }}\n          ttl: 20m\n          cluster-name: \"${{ steps.prep.outputs.cluster }}\"\n          kubeconfig-path: ${{ steps.prep.outputs.kubeconfig-path }}\n          export-kubeconfig: true\n      - name: Run e2e tests\n        run: TEST_KUBECONFIG=${{ steps.prep.outputs.kubeconfig-path }} make e2e\n      - name: Run flux bootstrap\n        run: |\n          ./bin/flux bootstrap git --manifests ./manifests/install/ \\\n          --components-extra=image-reflector-controller,image-automation-controller \\\n          --url=https://github.com/fluxcd-testing/${{ steps.prep.outputs.cluster }} \\\n          --branch=main \\\n          --path=clusters/k3s \\\n          --token-auth\n        env:\n          GIT_PASSWORD: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: Run flux check\n        run: |\n          ./bin/flux check\n      - name: Run flux reconcile\n        run: |\n          ./bin/flux reconcile ks flux-system --with-source\n          ./bin/flux get all\n          ./bin/flux events\n      - name: Collect reconcile logs\n        if: ${{ always() }}\n        continue-on-error: true\n        run: |\n          kubectl -n flux-system get all\n          kubectl -n flux-system describe pods\n          kubectl -n flux-system logs deploy/source-controller\n          kubectl -n flux-system logs deploy/kustomize-controller\n          kubectl -n flux-system logs deploy/notification-controller\n      - name: Delete flux\n        run: |\n          ./bin/flux uninstall -s --keep-namespace\n          kubectl delete ns flux-system --wait\n      - name: Delete cluster\n        if: ${{ always() }}\n        uses: replicatedhq/replicated-actions/remove-cluster@49b440dabd7e0e868cbbabda5cfc0d8332a279fa # v1.19.0\n        continue-on-error: true\n        with:\n          api-token: ${{ secrets.REPLICATED_API_TOKEN }}\n          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}\n      - name: Delete repository\n        if: ${{ always() }}\n        continue-on-error: true\n        run: |\n          gh repo delete fluxcd-testing/${{ steps.prep.outputs.cluster }} --yes\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n\n  conform-openshift:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        # Keep this list up-to-date with https://endoflife.date/red-hat-openshift\n        OPENSHIFT_VERSION: [ 4.18.0-okd ]\n      fail-fast: false\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: ${{ env.GO_VERSION }}\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Prepare\n        id: prep\n        run: |\n          ID=${GITHUB_SHA:0:7}-${{ matrix.OPENSHIFT_VERSION }}-$(date +%s)\n          PSEUDO_RAND_SUFFIX=$(echo \"${ID}\" | shasum | awk '{print $1}')\n          echo \"cluster=flux2-openshift-${PSEUDO_RAND_SUFFIX}\" >> $GITHUB_OUTPUT\n          KUBECONFIG_PATH=\"$(git rev-parse --show-toplevel)/bin/kubeconfig.yaml\"\n          echo \"kubeconfig-path=${KUBECONFIG_PATH}\" >> $GITHUB_OUTPUT\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Build\n        run: make build-dev\n      - name: Create repository\n        run: |\n          gh repo create --private --add-readme fluxcd-testing/${{ steps.prep.outputs.cluster }}\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: Create cluster\n        id: create-cluster\n        uses: replicatedhq/replicated-actions/create-cluster@49b440dabd7e0e868cbbabda5cfc0d8332a279fa # v1.19.0\n        with:\n          api-token: ${{ secrets.REPLICATED_API_TOKEN }}\n          kubernetes-distribution: \"openshift\"\n          kubernetes-version: ${{ matrix.OPENSHIFT_VERSION }}\n          ttl: 20m\n          cluster-name: \"${{ steps.prep.outputs.cluster }}\"\n          kubeconfig-path: ${{ steps.prep.outputs.kubeconfig-path }}\n          export-kubeconfig: true\n      - name: Run flux bootstrap\n        run: |\n          ./bin/flux bootstrap git --manifests ./manifests/openshift/ \\\n          --components-extra=image-reflector-controller,image-automation-controller \\\n          --url=https://github.com/fluxcd-testing/${{ steps.prep.outputs.cluster }} \\\n          --branch=main \\\n          --path=clusters/openshift \\\n          --token-auth\n        env:\n          GIT_PASSWORD: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: Run flux check\n        run: |\n          ./bin/flux check\n      - name: Run flux reconcile\n        run: |\n          ./bin/flux reconcile ks flux-system --with-source\n          ./bin/flux get all\n          ./bin/flux events\n      - name: Collect reconcile logs\n        if: ${{ always() }}\n        continue-on-error: true\n        run: |\n          kubectl -n flux-system get all\n          kubectl -n flux-system describe pods\n          kubectl -n flux-system logs deploy/source-controller\n          kubectl -n flux-system logs deploy/kustomize-controller\n          kubectl -n flux-system logs deploy/notification-controller\n      - name: Delete flux\n        run: |\n          ./bin/flux uninstall -s --keep-namespace\n          kubectl delete ns flux-system --wait\n      - name: Delete cluster\n        if: ${{ always() }}\n        uses: replicatedhq/replicated-actions/remove-cluster@49b440dabd7e0e868cbbabda5cfc0d8332a279fa # v1.19.0\n        continue-on-error: true\n        with:\n          api-token: ${{ secrets.REPLICATED_API_TOKEN }}\n          cluster-id: ${{ steps.create-cluster.outputs.cluster-id }}\n      - name: Delete repository\n        if: ${{ always() }}\n        continue-on-error: true\n        run: |\n          gh repo delete fluxcd-testing/${{ steps.prep.outputs.cluster }} --yes\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n"
						}
					},
					{
						"name": "e2e-azure.yaml",
						"object": {
							"text": "name: e2e-azure\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 6 * * *'\n  push:\n    branches:\n      - main\n    paths:\n      - 'tests/**'\n      - '.github/workflows/e2e-azure.yaml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - 'tests/**'\n      - '.github/workflows/e2e-azure.yaml'\n\npermissions:\n  contents: read\n\njobs:\n  e2e-aks:\n    runs-on: ubuntu-22.04\n    defaults:\n      run:\n        working-directory: ./tests/integration\n    if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && github.actor != 'dependabot[bot]'\n    steps:\n      - name: CheckoutD\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache-dependency-path: tests/integration/go.sum\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2\n      - name: Setup Flux CLI\n        run: make build\n        working-directory: ./\n      - name: Setup SOPS\n        run: |\n          mkdir -p $HOME/.local/bin\n          wget -O $HOME/.local/bin/sops https://github.com/mozilla/sops/releases/download/v$SOPS_VER/sops-v$SOPS_VER.linux\n          chmod +x $HOME/.local/bin/sops\n        env:\n          SOPS_VER: 3.7.1\n      - name: Authenticate to Azure\n        uses: Azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v1.4.6\n        with:\n          creds: '{\"clientId\":\"${{ secrets.ARM_CLIENT_ID }}\",\"clientSecret\":\"${{ secrets.ARM_CLIENT_SECRET }}\",\"subscriptionId\":\"${{ secrets.ARM_SUBSCRIPTION_ID }}\",\"tenantId\":\"${{ secrets.ARM_TENANT_ID }}\"}'\n      - name: Set dynamic variables in .env\n        run: |\n          cat > .env <<EOF\n          export TF_VAR_tags='{ \"environment\"=\"github\", \"ci\"=\"true\", \"repo\"=\"flux2\", \"createdat\"=\"$(date -u +x%Y-%m-%d_%Hh%Mm%Ss)\" }'\n          EOF\n      - name: Print .env for dynamic tag value reference\n        run: cat .env\n      - name: Run Azure e2e tests\n        env:\n          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}\n          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}\n          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}\n          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}\n          TF_VAR_azuredevops_org: ${{ secrets.TF_VAR_azuredevops_org }}\n          TF_VAR_azuredevops_pat: ${{ secrets.TF_VAR_azuredevops_pat }}\n          TF_VAR_azure_location: ${{ vars.TF_VAR_azure_location }}\n          GITREPO_SSH_CONTENTS: ${{ secrets.GIT_SSH_IDENTITY }}\n          GITREPO_SSH_PUB_CONTENTS: ${{ secrets.GIT_SSH_IDENTITY_PUB }}\n        run: |\n          source .env\n          mkdir -p ./build/ssh\n          cat <<EOF > build/ssh/key\n          $GITREPO_SSH_CONTENTS\n          EOF\n          export GITREPO_SSH_PATH=build/ssh/key\n          cat <<EOF > build/ssh/key.pub\n          $GITREPO_SSH_PUB_CONTENTS\n          EOF\n          export GITREPO_SSH_PUB_PATH=build/ssh/key.pub\n          make test-azure\n      - name: Ensure resource cleanup\n        if: ${{ always() }}\n        env:\n          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}\n          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}\n          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}\n          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}\n          TF_VAR_azuredevops_org: ${{ secrets.TF_VAR_azuredevops_org }}\n          TF_VAR_azuredevops_pat: ${{ secrets.TF_VAR_azuredevops_pat }}\n          TF_VAR_azure_location: ${{ vars.TF_VAR_azure_location }}\n        run: source .env && make destroy-azure\n"
						}
					},
					{
						"name": "e2e-bootstrap.yaml",
						"object": {
							"text": "name: e2e-bootstrap\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ 'main', 'release/**' ]\n  pull_request:\n    branches: [ 'main', 'release/**' ]\n    paths-ignore: [ 'docs/**', 'rfcs/**' ]\n\npermissions:\n  contents: read\n\njobs:\n  e2e-boostrap-github:\n    runs-on: ubuntu-latest\n    if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && github.actor != 'dependabot[bot]'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Setup Kubernetes\n        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0\n        with:\n          version: v0.24.0\n          cluster_name: kind\n          # The versions below should target the newest Kubernetes version\n          # Keep this up-to-date with https://endoflife.date/kubernetes\n          node_image: ghcr.io/fluxcd/kindest/node:v1.33.0-amd64\n          kubectl_version: v1.32.0\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Setup yq\n        uses: fluxcd/pkg/actions/yq@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Build\n        run: make build-dev\n      - name: Set outputs\n        id: vars\n        run: |\n          REPOSITORY_NAME=${{ github.event.repository.name }}\n          BRANCH_NAME=${GITHUB_REF##*/}\n          COMMIT_SHA=$(git rev-parse HEAD)\n          PSEUDO_RAND_SUFFIX=$(echo \"${BRANCH_NAME}-${COMMIT_SHA}\" | shasum | awk '{print $1}')\n          TEST_REPO_NAME=\"${REPOSITORY_NAME}-${PSEUDO_RAND_SUFFIX}\"\n          echo \"test_repo_name=$TEST_REPO_NAME\" >> $GITHUB_OUTPUT\n      - name: bootstrap init\n        run: |\n          ./bin/flux bootstrap github --manifests ./manifests/install/ \\\n          --owner=fluxcd-testing \\\n          --image-pull-secret=ghcr-auth \\\n          --registry-creds=fluxcd:$GITHUB_TOKEN \\\n          --repository=${{ steps.vars.outputs.test_repo_name }} \\\n          --branch=main \\\n          --path=test-cluster \\\n          --team=team-z\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: verify image pull secret\n        run: |\n          kubectl -n flux-system get secret ghcr-auth | grep dockerconfigjson\n      - name: bootstrap no-op\n        run: |\n          ./bin/flux bootstrap github --manifests ./manifests/install/ \\\n          --owner=fluxcd-testing \\\n          --image-pull-secret=ghcr-auth \\\n          --repository=${{ steps.vars.outputs.test_repo_name }} \\\n          --branch=main \\\n          --path=test-cluster \\\n          --team=team-z\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: bootstrap customize\n        run: |\n          make setup-bootstrap-patch\n          ./bin/flux bootstrap github --manifests ./manifests/install/ \\\n          --owner=fluxcd-testing \\\n          --repository=${{ steps.vars.outputs.test_repo_name }} \\\n          --branch=main \\\n          --path=test-cluster \\\n          --team=team-z\n          if [ $(kubectl get deployments.apps source-controller -o jsonpath='{.spec.template.spec.securityContext.runAsUser}') != \"10000\" ]; then\n          echo \"Bootstrap not customized as controller is not running as user 10000\" && exit 1\n          fi\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n          GITHUB_REPO_NAME: ${{ steps.vars.outputs.test_repo_name }}\n          GITHUB_ORG_NAME: fluxcd-testing\n      - name: uninstall\n        run: |\n          ./bin/flux uninstall -s --keep-namespace\n          kubectl delete ns flux-system --timeout=10m --wait=true\n      - name: test image automation\n        run: |\n          make setup-image-automation\n          ./bin/flux bootstrap github --manifests ./manifests/install/ \\\n          --owner=fluxcd-testing \\\n          --repository=${{ steps.vars.outputs.test_repo_name }} \\\n          --branch=main \\\n          --path=test-cluster \\\n          --read-write-key\n          ./bin/flux reconcile image repository podinfo\n          ./bin/flux reconcile image update flux-system\n          ./bin/flux get images all\n          ./bin/flux -n flux-system events --for ImageUpdateAutomation/flux-system\n          kubectl -n flux-system get -o yaml ImageUpdateAutomation flux-system\n          kubectl -n flux-system get -o yaml ImageUpdateAutomation flux-system | \\\n           yq '.status.lastPushCommit | length > 1' | grep 'true'\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n          GITHUB_REPO_NAME: ${{ steps.vars.outputs.test_repo_name }}\n          GITHUB_ORG_NAME: fluxcd-testing\n      - name: delete repository\n        if: ${{ always() }}\n        continue-on-error: true\n        run: |\n          gh repo delete fluxcd-testing/${{ steps.vars.outputs.test_repo_name }} --yes\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITPROVIDER_BOT_TOKEN }}\n      - name: Debug failure\n        if: failure()\n        run: |\n          kubectl -n flux-system get all\n          kubectl -n flux-system logs deploy/source-controller\n          kubectl -n flux-system logs deploy/kustomize-controller\n"
						}
					},
					{
						"name": "e2e-gcp.yaml",
						"object": {
							"text": "name: e2e-gcp\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: '0 6 * * *'\n  push:\n    branches:\n      - main\n    paths:\n      - 'tests/**'\n      - '.github/workflows/e2e-gcp.yaml'\n  pull_request:\n    branches:\n      - main\n    paths:\n      - 'tests/**'\n      - '.github/workflows/e2e-gcp.yaml'\n\npermissions:\n  contents: read\n\njobs:\n  e2e-gcp:\n    runs-on: ubuntu-22.04\n    defaults:\n      run:\n        working-directory: ./tests/integration\n    if: (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) && github.actor != 'dependabot[bot]'\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache-dependency-path: tests/integration/go.sum\n      - name: Setup Terraform\n        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2\n      - name: Setup Flux CLI\n        run: make build\n        working-directory: ./\n      - name: Setup SOPS\n        run: |\n          mkdir -p $HOME/.local/bin\n          wget -O $HOME/.local/bin/sops https://github.com/mozilla/sops/releases/download/v$SOPS_VER/sops-v$SOPS_VER.linux\n          chmod +x $HOME/.local/bin/sops\n        env:\n          SOPS_VER: 3.7.1\n      - name: Authenticate to Google Cloud\n        uses: google-github-actions/auth@7c6bc770dae815cd3e89ee6cdf493a5fab2cc093 # v3.0.0\n        id: 'auth'\n        with:\n          credentials_json: '${{ secrets.FLUX2_E2E_GOOGLE_CREDENTIALS }}'\n          token_format: 'access_token'\n      - name: Setup gcloud\n        uses: google-github-actions/setup-gcloud@aa5489c8933f4cc7a4f7d45035b3b1440c9c10db # v3.0.1\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0\n      - name: Setup Docker Buildx\n        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1\n      - name: Log into us-central1-docker.pkg.dev\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          registry: us-central1-docker.pkg.dev\n          username: oauth2accesstoken\n          password: ${{ steps.auth.outputs.access_token }}\n      - name: Set dynamic variables in .env\n        run: |\n          cat > .env <<EOF\n          export TF_VAR_tags='{ \"environment\"=\"github\", \"ci\"=\"true\", \"repo\"=\"flux2\", \"createdat\"=\"$(date -u +x%Y-%m-%d_%Hh%Mm%Ss)\" }'\n          EOF\n      - name: Print .env for dynamic tag value reference\n        run: cat .env\n      - name: Run GCP e2e tests\n        env:\n          TF_VAR_gcp_project_id: ${{ vars.TF_VAR_gcp_project_id }}\n          TF_VAR_gcp_region: ${{ vars.TF_VAR_gcp_region }}\n          TF_VAR_gcp_zone: ${{ vars.TF_VAR_gcp_zone }}\n          TF_VAR_gcp_email: ${{ secrets.TF_VAR_gcp_email }}\n          TF_VAR_gcp_keyring: ${{ secrets.TF_VAR_gcp_keyring }}\n          TF_VAR_gcp_crypto_key: ${{ secrets.TF_VAR_gcp_crypto_key }}\n          GITREPO_SSH_CONTENTS: ${{ secrets.GCP_GITREPO_SSH_CONTENTS }}\n          GITREPO_SSH_PUB_CONTENTS: ${{ secrets.GCP_GITREPO_SSH_PUB_CONTENTS }}\n        run: |\n          source .env\n          mkdir -p ./build/ssh\n          touch ./build/ssh/key\n          echo $GITREPO_SSH_CONTENTS | base64 -d > build/ssh/key\n          export GITREPO_SSH_PATH=build/ssh/key\n          touch ./build/ssh/key.pub\n          echo $GITREPO_SSH_PUB_CONTENTS | base64 -d > ./build/ssh/key.pub\n          export GITREPO_SSH_PUB_PATH=build/ssh/key.pub\n          make test-gcp\n      - name: Ensure resource cleanup\n        if: ${{ always() }}\n        env:\n          TF_VAR_gcp_project_id: ${{ vars.TF_VAR_gcp_project_id }}\n          TF_VAR_gcp_region: ${{ vars.TF_VAR_gcp_region }}\n          TF_VAR_gcp_zone: ${{ vars.TF_VAR_gcp_zone }}\n          TF_VAR_gcp_email: ${{ secrets.TF_VAR_gcp_email }}\n          TF_VAR_gcp_keyring: ${{ secrets.TF_VAR_gcp_keyring }}\n          TF_VAR_gcp_crypto_key: ${{ secrets.TF_VAR_gcp_crypto_key }}\n        run: source .env && make destroy-gcp\n"
						}
					},
					{
						"name": "e2e.yaml",
						"object": {
							"text": "name: e2e\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ 'main', 'release/**' ]\n  pull_request:\n    branches: [ 'main', 'release/**' ]\n    paths-ignore: [ 'docs/**', 'rfcs/**' ]\n\npermissions:\n  contents: read\n\njobs:\n  e2e-amd64-kubernetes:\n    runs-on:\n      group: \"Default Larger Runners\"\n      labels: ubuntu-latest-16-cores\n    services:\n      registry:\n        image: registry:2\n        ports:\n          - 5000:5000\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Setup Kubernetes\n        uses: helm/kind-action@a1b0e391336a6ee6713a0583f8c6240d70863de3 # v1.12.0\n        with:\n          version: v0.24.0\n          cluster_name: kind\n          wait: 5s\n          config: .github/kind/config.yaml # disable KIND-net\n          # The versions below should target the oldest supported Kubernetes version\n          # Keep this up-to-date with https://endoflife.date/kubernetes\n          node_image: ghcr.io/fluxcd/kindest/node:v1.31.5-amd64\n          kubectl_version: v1.32.0\n      - name: Setup Calico for network policy\n        run: |\n          kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/calico.yaml\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Run tests\n        run: make test\n      - name: Run e2e tests\n        run: TEST_KUBECONFIG=$HOME/.kube/config make e2e\n      - name: Check if working tree is dirty\n        run: |\n          if [[ $(git diff --stat) != '' ]]; then\n            git diff\n            echo 'run make test and commit changes'\n            exit 1\n          fi\n      - name: Build\n        run: make build-dev\n      - name: flux check --pre\n        run: |\n          ./bin/flux check --pre\n      - name: flux install --manifests\n        run: |\n          ./bin/flux install --manifests ./manifests/install/\n      - name: flux create secret\n        run: |\n          ./bin/flux create secret git git-ssh-test \\\n            --url ssh://git@github.com/stefanprodan/podinfo\n          ./bin/flux create secret git git-https-test \\\n            --url https://github.com/stefanprodan/podinfo \\\n            --username=test --password=test\n          ./bin/flux create secret helm helm-test \\\n            --username=test --password=test\n      - name: flux create source git\n        run: |\n          ./bin/flux create source git podinfo \\\n            --url https://github.com/stefanprodan/podinfo  \\\n            --tag-semver=\">=6.3.5\"\n      - name: flux create source git export apply\n        run: |\n          ./bin/flux create source git podinfo-export \\\n            --url https://github.com/stefanprodan/podinfo  \\\n            --tag-semver=\">=6.3.5\" \\\n            --export | kubectl apply -f -\n          ./bin/flux delete source git podinfo-export --silent\n      - name: flux get sources git\n        run: |\n          ./bin/flux get sources git\n      - name: flux get sources git --all-namespaces\n        run: |\n          ./bin/flux get sources git --all-namespaces\n      - name: flux create kustomization\n        run: |\n          ./bin/flux create kustomization podinfo \\\n            --source=podinfo \\\n            --path=\"./deploy/overlays/dev\" \\\n            --prune=true \\\n            --interval=5m \\\n            --health-check=\"Deployment/frontend.dev\" \\\n            --health-check=\"Deployment/backend.dev\" \\\n            --health-check-timeout=3m\n      - name: flux trace\n        run: |\n          ./bin/flux trace frontend \\\n            --kind=deployment \\\n            --api-version=apps/v1 \\\n            --namespace=dev\n      - name: flux reconcile kustomization --with-source\n        run: |\n          ./bin/flux reconcile kustomization podinfo --with-source\n      - name: flux get kustomizations\n        run: |\n          ./bin/flux get kustomizations\n      - name: flux get kustomizations --all-namespaces\n        run: |\n          ./bin/flux get kustomizations --all-namespaces\n      - name: flux suspend kustomization\n        run: |\n          ./bin/flux suspend kustomization podinfo\n      - name: flux resume kustomization\n        run: |\n          ./bin/flux resume kustomization podinfo\n      - name: flux export\n        run: |\n          ./bin/flux export source git --all\n          ./bin/flux export kustomization --all\n      - name: flux delete kustomization\n        run: |\n          ./bin/flux delete kustomization podinfo --silent\n      - name: flux create source helm\n        run: |\n          ./bin/flux create source helm podinfo \\\n            --url https://stefanprodan.github.io/podinfo\n      - name: flux create helmrelease --source=HelmRepository/podinfo\n        run: |\n          ./bin/flux create hr podinfo-helm \\\n            --target-namespace=default \\\n            --source=HelmRepository/podinfo.flux-system \\\n            --chart=podinfo \\\n            --chart-version=\">6.0.0 <7.0.0\"\n      - name: flux create helmrelease --source=GitRepository/podinfo\n        run: |\n          ./bin/flux create hr podinfo-git \\\n            --target-namespace=default \\\n            --source=GitRepository/podinfo \\\n            --chart=./charts/podinfo\n      - name: flux reconcile helmrelease --with-source\n        run: |\n          ./bin/flux reconcile helmrelease podinfo-git --with-source\n      - name: flux get helmreleases\n        run: |\n          ./bin/flux get helmreleases\n      - name: flux get helmreleases --all-namespaces\n        run: |\n          ./bin/flux get helmreleases --all-namespaces\n      - name: flux export helmrelease\n        run: |\n          ./bin/flux export hr --all\n      - name: flux delete helmrelease podinfo-helm\n        run: |\n          ./bin/flux delete hr podinfo-helm --silent\n      - name: flux delete helmrelease podinfo-git\n        run: |\n          ./bin/flux delete hr podinfo-git --silent\n      - name: flux delete source helm\n        run: |\n          ./bin/flux delete source helm podinfo --silent\n      - name: flux delete source git\n        run: |\n          ./bin/flux delete source git podinfo --silent\n      - name: flux oci artifacts\n        run: |\n          ./bin/flux push artifact oci://localhost:5000/fluxcd/flux:${{ github.sha }} \\\n            --path=\"./manifests\" \\\n            --source=\"${{ github.repositoryUrl }}\" \\\n            --revision=\"${{ github.ref }}@sha1:${{ github.sha }}\"\n          ./bin/flux tag artifact oci://localhost:5000/fluxcd/flux:${{ github.sha }} \\\n            --tag latest\n          ./bin/flux list artifacts oci://localhost:5000/fluxcd/flux\n      - name: flux oci repositories\n        run: |\n          ./bin/flux create source oci podinfo-oci \\\n            --url oci://ghcr.io/stefanprodan/manifests/podinfo \\\n            --tag-semver 6.3.x \\\n            --interval 10m\n          ./bin/flux create kustomization podinfo-oci \\\n            --source=OCIRepository/podinfo-oci \\\n            --path=\"./\" \\\n            --prune=true \\\n            --interval=5m \\\n            --target-namespace=default \\\n            --wait=true \\\n            --health-check-timeout=3m\n          ./bin/flux reconcile source oci podinfo-oci\n          ./bin/flux suspend source oci podinfo-oci\n          ./bin/flux get sources oci\n          ./bin/flux resume source oci podinfo-oci\n          ./bin/flux export source oci podinfo-oci\n          ./bin/flux delete ks podinfo-oci --silent\n          ./bin/flux delete source oci podinfo-oci --silent\n      - name: flux create tenant\n        run: |\n          ./bin/flux create tenant dev-team --with-namespace=apps\n          ./bin/flux -n apps create source helm podinfo \\\n            --url https://stefanprodan.github.io/podinfo\n          ./bin/flux -n apps create hr podinfo-helm \\\n            --source=HelmRepository/podinfo \\\n            --chart=podinfo \\\n            --chart-version=\"6.3.x\" \\\n            --service-account=dev-team\n      - name: flux2-kustomize-helm-example\n        run: |\n          ./bin/flux create source git flux-system \\\n          --url=https://github.com/fluxcd/flux2-kustomize-helm-example \\\n          --branch=main \\\n          --ignore-paths=\"./clusters/**/flux-system/\" \\\n          --recurse-submodules\n          ./bin/flux create kustomization flux-system \\\n          --source=flux-system \\\n          --path=./clusters/staging\n          kubectl -n flux-system wait kustomization/infra-controllers --for=condition=ready --timeout=5m\n          kubectl -n flux-system wait kustomization/apps --for=condition=ready --timeout=5m\n          kubectl -n podinfo wait helmrelease/podinfo --for=condition=ready --timeout=5m\n      - name: flux tree\n        run: |\n          ./bin/flux tree kustomization flux-system | grep Service/podinfo\n      - name: flux events\n        run: |\n          ./bin/flux -n flux-system events --for Kustomization/apps | grep 'HelmRelease/podinfo'\n          ./bin/flux -n podinfo events --for HelmRelease/podinfo | grep 'podinfo.v1'\n      - name: flux stats\n        run: |\n          ./bin/flux stats -A\n      - name: flux check\n        run: |\n          ./bin/flux check\n      - name: flux migrate\n        run: |\n          ./bin/flux migrate\n      - name: flux version\n        run: |\n          ./bin/flux version\n      - name: flux uninstall\n        run: |\n          ./bin/flux uninstall --silent\n      - name: Debug failure\n        if: failure()\n        run: |\n          kubectl version --client\n          kubectl -n flux-system get all\n          kubectl -n flux-system describe pods\n          kubectl -n flux-system get kustomizations -oyaml\n          kubectl -n flux-system logs deploy/source-controller\n          kubectl -n flux-system logs deploy/kustomize-controller\n"
						}
					},
					{
						"name": "ossf.yaml",
						"object": {
							"text": "name: ossf\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n  schedule:\n    # Weekly on Saturdays.\n    - cron:  '30 1 * * 6'\n\npermissions: read-all\n\njobs:\n  scorecard:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      id-token: write\n      actions: read\n      contents: read\n    steps:\n      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Run analysis\n        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          repo_token: ${{ secrets.GITHUB_TOKEN }}\n          publish_results: true\n      - name: Upload artifact\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n      - name: Upload SARIF results\n        uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11\n        with:\n          sarif_file: results.sarif\n"
						}
					},
					{
						"name": "release.yaml",
						"object": {
							"text": "name: release\n\non:\n  push:\n    tags: [\"v*\"]\n\npermissions:\n  contents: read\n\njobs:\n  release-flux-cli:\n    outputs:\n      hashes: ${{ steps.slsa.outputs.hashes }}\n      image_url: ${{ steps.slsa.outputs.image_url }}\n      image_digest: ${{ steps.slsa.outputs.image_digest }}\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write # needed to write releases\n      id-token: write # needed for keyless signing\n      packages: write # needed for ghcr access\n    steps:\n      - name: Checkout\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Unshallow\n        run: git fetch --prune --unshallow\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache: false\n      - name: Setup QEMU\n        uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0\n      - name: Setup Docker Buildx\n        id: buildx\n        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1\n      - name: Setup Syft\n        uses: anchore/sbom-action/download-syft@da167eac915b4e86f08b264dbdbc867b61be6f0c # v0.20.5\n      - name: Setup Cosign\n        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Login to GitHub Container Registry\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Login to Docker Hub\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Generate manifests\n        run: |\n          make cmd/flux/.manifests.done\n          ./manifests/scripts/bundle.sh \"\" ./output manifests.tar.gz\n          kustomize build ./manifests/install > ./output/install.yaml\n      - name: Build CRDs\n        run: |\n          kustomize build manifests/crds > all-crds.yaml\n      - name: Generate OpenAPI JSON schemas from CRDs\n        uses: fluxcd/pkg/actions/crdjsonschema@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n        with:\n          crd: all-crds.yaml\n          output: schemas\n      - name: Archive the OpenAPI JSON schemas\n        run: |\n          tar -czvf ./output/crd-schemas.tar.gz -C schemas .\n      - name: Run GoReleaser\n        id: run-goreleaser\n        uses: goreleaser/goreleaser-action@e435ccd777264be153ace6237001ef4d979d3a7a # v6.4.0\n        with:\n          version: latest\n          args: release --skip=validate\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n          HOMEBREW_TAP_GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}\n          AUR_BOT_SSH_PRIVATE_KEY: ${{ secrets.AUR_BOT_SSH_PRIVATE_KEY }}\n      - name: Generate SLSA metadata\n        id: slsa\n        env:\n          ARTIFACTS: \"${{ steps.run-goreleaser.outputs.artifacts }}\"\n        run: |\n          set -euo pipefail\n\n          hashes=$(echo -E $ARTIFACTS | jq --raw-output '.[] | {name, \"digest\": (.extra.Digest // .extra.Checksum)} | select(.digest) | {digest} + {name} | join(\"  \") | sub(\"^sha256:\";\"\")' | base64 -w0)\n          echo \"hashes=$hashes\" >> $GITHUB_OUTPUT\n\n          image_url=fluxcd/flux-cli:$GITHUB_REF_NAME\n          echo \"image_url=$image_url\" >> $GITHUB_OUTPUT\n\n          image_digest=$(docker buildx imagetools inspect ${image_url}  --format '{{json .}}' | jq -r .manifest.digest)\n          echo \"image_digest=$image_digest\" >> $GITHUB_OUTPUT\n\n  release-flux-manifests:\n    runs-on: ubuntu-latest\n    needs: release-flux-cli\n    permissions:\n      id-token: write\n      packages: write\n    steps:\n      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Kustomize\n        uses: fluxcd/pkg/actions/kustomize@7f090e931301b18cbdc37d9a28b08f84ba1270fb # main\n      - name: Setup Flux CLI\n        uses: ./action/\n      - name: Prepare\n        id: prep\n        run: |\n          VERSION=$(flux version --client | awk '{ print $NF }')\n          echo \"version=${VERSION}\" >> $GITHUB_OUTPUT\n      - name: Login to GHCR\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          registry: ghcr.io\n          username: fluxcdbot\n          password: ${{ secrets.GITHUB_TOKEN }}\n      - name: Login to DockerHub\n        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0\n        with:\n          username: fluxcdbot\n          password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n      - name: Push manifests to GHCR\n        run: |\n          mkdir -p ./ghcr.io/flux-system\n          flux install --registry=ghcr.io/fluxcd \\\n          --components-extra=image-reflector-controller,image-automation-controller \\\n          --export > ./ghcr.io/flux-system/gotk-components.yaml\n\n          cd ./ghcr.io && flux push artifact \\\n          oci://ghcr.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }} \\\n          --path=\"./flux-system\" \\\n          --source=${{ github.repositoryUrl }} \\\n          --revision=\"${{ github.ref_name }}@sha1:${{ github.sha }}\"\n      - name: Push manifests to DockerHub\n        run: |\n          mkdir -p ./docker.io/flux-system\n          flux install --registry=docker.io/fluxcd \\\n          --components-extra=image-reflector-controller,image-automation-controller \\\n          --export > ./docker.io/flux-system/gotk-components.yaml\n\n          cd ./docker.io && flux push artifact \\\n          oci://docker.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }} \\\n          --path=\"./flux-system\" \\\n          --source=${{ github.repositoryUrl }} \\\n          --revision=\"${{ github.ref_name }}@sha1:${{ github.sha }}\"\n      - uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2\n      - name: Sign manifests\n        env:\n          COSIGN_EXPERIMENTAL: 1\n        run: |\n          cosign sign --yes ghcr.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }}\n          cosign sign --yes docker.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }}\n      - name: Tag manifests\n        run: |\n          flux tag artifact oci://ghcr.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }} \\\n          --tag latest\n\n          flux tag artifact oci://docker.io/fluxcd/flux-manifests:${{ steps.prep.outputs.version }} \\\n          --tag latest\n\n  release-provenance:\n    needs: [release-flux-cli]\n    permissions:\n      actions: read # for detecting the Github Actions environment.\n      id-token: write # for creating OIDC tokens for signing.\n      contents: write # for uploading attestations to GitHub releases.\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0\n    with:\n      provenance-name: \"provenance.intoto.jsonl\"\n      base64-subjects: \"${{ needs.release-flux-cli.outputs.hashes }}\"\n      upload-assets: true\n\n  dockerhub-provenance:\n    needs: [release-flux-cli]\n    permissions:\n      actions: read # for detecting the Github Actions environment.\n      id-token: write # for creating OIDC tokens for signing.\n      packages: write # for uploading attestations.\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0\n    with:\n      image: ${{ needs.release-flux-cli.outputs.image_url }}\n      digest: ${{ needs.release-flux-cli.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.DOCKER_FLUXCD_PASSWORD }}\n\n  ghcr-provenance:\n    needs: [release-flux-cli]\n    permissions:\n      actions: read # for detecting the Github Actions environment.\n      id-token: write # for creating OIDC tokens for signing.\n      packages: write # for uploading attestations.\n    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v2.1.0\n    with:\n      image: ghcr.io/${{ needs.release-flux-cli.outputs.image_url }}\n      digest: ${{ needs.release-flux-cli.outputs.image_digest }}\n      registry-username: fluxcdbot\n    secrets:\n      registry-password: ${{ secrets.GITHUB_TOKEN }}\n"
						}
					},
					{
						"name": "scan.yaml",
						"object": {
							"text": "name: scan\n\non:\n  workflow_dispatch:\n  push:\n    branches: [ 'main', 'release/**' ]\n  pull_request:\n    branches: [ 'main', 'release/**' ]\n  schedule:\n    - cron: '18 10 * * 3'\n\npermissions:\n  contents: read\n\njobs:\n  scan-fossa:\n    runs-on: ubuntu-latest\n    if: github.actor != 'dependabot[bot]'\n    steps:\n      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Run FOSSA scan and upload build data\n        uses: fossa-contrib/fossa-action@3d2ef181b1820d6dcd1972f86a767d18167fa19b # v3.0.1\n        with:\n          # FOSSA Push-Only API Token\n          fossa-api-key: 5ee8bf422db1471e0bcf2bcb289185de\n          github-token: ${{ github.token }}\n\n  scan-codeql:\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n    if: github.actor != 'dependabot[bot]'\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version-file: 'go.mod'\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Initialize CodeQL\n        uses: github/codeql-action/init@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11\n        with:\n          languages: go\n          # xref: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n          # xref: https://codeql.github.com/codeql-query-help/go/\n          queries: security-and-quality\n      - name: Autobuild\n        uses: github/codeql-action/autobuild@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11\n      - name: Perform CodeQL Analysis\n        uses: github/codeql-action/analyze@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11\n"
						}
					},
					{
						"name": "sync-labels.yaml",
						"object": {
							"text": "name: sync-labels\non:\n  workflow_dispatch:\n  push:\n    branches:\n      - main\n    paths:\n      - .github/labels.yaml\n\npermissions:\n  contents: read\n\njobs:\n  labels:\n    name: Run sync\n    runs-on: ubuntu-latest\n    permissions:\n      issues: write\n    steps:\n      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - uses: EndBug/label-sync@52074158190acb45f3077f9099fea818aa43f97a # v2.3.3\n        with:\n          # Configuration file\n          config-file: |\n            https://raw.githubusercontent.com/fluxcd/community/main/.github/standard-labels.yaml\n            .github/labels.yaml\n          # Strictly declarative\n          delete-other-labels: true\n"
						}
					},
					{
						"name": "update.yaml",
						"object": {
							"text": "name: update\n\non:\n  workflow_dispatch:\n  schedule:\n    - cron: \"0 * * * *\"\n  push:\n    branches: [main]\n\npermissions:\n  contents: read\n\njobs:\n  update-components:\n    runs-on: ubuntu-latest\n    permissions:\n      contents: write\n      pull-requests: write\n    steps:\n      - name: Check out code\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Setup Go\n        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0\n        with:\n          go-version: 1.25.x\n          cache-dependency-path: |\n            **/go.sum\n            **/go.mod\n      - name: Update component versions\n        id: update\n        env:\n          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n        run: |\n          PR_BODY=$(mktemp)\n\n          bump_version() {\n            local LATEST_VERSION=$(curl -s -H \"Authorization: token ${GITHUB_TOKEN}\" https://api.github.com/repos/fluxcd/$1/releases | jq -r 'sort_by(.published_at) | .[-1] | .tag_name')\n\n            if [[ \"$LATEST_VERSION\" == *\"-rc\"* ]]; then\n              echo \"Skipping release candidate version for $1: $LATEST_VERSION\"\n              return\n            fi\n\n            local CTRL_VERSION=$(sed -n \"s/.*$1\\/releases\\/download\\/\\(.*\\)\\/.*/\\1/p;n\" manifests/bases/$1/kustomization.yaml)\n            local CRD_VERSION=$(sed -n \"s/.*$1\\/releases\\/download\\/\\(.*\\)\\/.*/\\1/p\" manifests/crds/kustomization.yaml)\n            local MOD_VERSION=$(go list -m -f '{{ .Version }}' \"github.com/fluxcd/$1/api\")\n\n            local changed=false\n\n            if [[ \"${CTRL_VERSION}\" != \"${LATEST_VERSION}\" ]]; then\n              sed -i \"s/\\($1\\/releases\\/download\\/\\)v.*\\(\\/.*\\)/\\1${LATEST_VERSION}\\2/g\" \"manifests/bases/$1/kustomization.yaml\"\n              changed=true\n            fi\n\n            if [[ \"${CRD_VERSION}\" != \"${LATEST_VERSION}\" ]]; then\n              sed -i \"s/\\($1\\/releases\\/download\\/\\)v.*\\(\\/.*\\)/\\1${LATEST_VERSION}\\2/g\" \"manifests/crds/kustomization.yaml\"\n              changed=true\n            fi\n\n            if [[ \"${MOD_VERSION}\" != \"${LATEST_VERSION}\" ]]; then\n              go mod edit -require=\"github.com/fluxcd/$1/api@${LATEST_VERSION}\"\n              make tidy\n              changed=true\n            fi\n\n            if [[ \"$changed\" == true ]]; then\n              echo \"- $1 to ${LATEST_VERSION}\" >> $PR_BODY\n              echo \"  https://github.com/fluxcd/$1/blob/${LATEST_VERSION}/CHANGELOG.md\" >> $PR_BODY\n            fi\n          }\n\n          {\n            # bump controller versions\n            bump_version helm-controller\n            bump_version kustomize-controller\n            bump_version source-controller\n            bump_version notification-controller\n            bump_version image-reflector-controller\n            bump_version image-automation-controller\n\n            # diff change\n            git diff\n\n            # export PR_BODY for PR and commit\n            # NB: this may look strange but it is the way it should be done to\n            # maintain our precious newlines\n            # Ref: https://github.com/github/docs/issues/21529\n            echo 'pr_body<<EOF' >> $GITHUB_OUTPUT\n            cat $PR_BODY >> $GITHUB_OUTPUT\n            echo 'EOF' >> $GITHUB_OUTPUT\n          }\n\n      - name: Create Pull Request\n        id: cpr\n        uses: peter-evans/create-pull-request@271a8d0340265f705b14b6d32b9829c1cb33d45e # v7.0.8\n        with:\n          token: ${{ secrets.BOT_GITHUB_TOKEN }}\n          commit-message: |\n            Update toolkit components\n\n            ${{ steps.update.outputs.pr_body }}\n          committer: GitHub <noreply@github.com>\n          author: fluxcdbot <fluxcdbot@users.noreply.github.com>\n          signoff: true\n          branch: update-components\n          title: Update toolkit components\n          body: |\n            ${{ steps.update.outputs.pr_body }}\n          labels: |\n            dependencies\n          reviewers: ${{ secrets.ASSIGNEES }}\n\n      - name: Check output\n        run: |\n          echo \"Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}\"\n          echo \"Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}\"\n"
						}
					}
				]
			}
		}
	}
}