{
	"data": {
		"repository": {
			"name": "compliance-trestle",
			"nameWithOwner": "oscal-compass/compliance-trestle",
			"url": "https://github.com/oscal-compass/compliance-trestle",
			"description": "An opinionated tooling platform for managing compliance as code, using continuous integration and NIST's OSCAL standard.",
			"releases": {
				"nodes": [
					{
						"name": "v0.0.2",
						"tagName": "v0.0.2",
						"url": "https://github.com/oscal-compass/compliance-trestle/releases/tag/v0.0.2",
						"createdAt": "2020-09-10T11:10:04Z",
						"releaseAssets": {
							"nodes": [
								{
									"name": "compliance-trestle-0.0.2.tar.gz",
									"downloadUrl": "https://github.com/oscal-compass/compliance-trestle/releases/download/v0.0.2/compliance-trestle-0.0.2.tar.gz"
								},
								{
									"name": "compliance_trestle-0.0.2-py2.py3-none-any.whl",
									"downloadUrl": "https://github.com/oscal-compass/compliance-trestle/releases/download/v0.0.2/compliance_trestle-0.0.2-py2.py3-none-any.whl"
								}
							]
						}
					}
				]
			},
			"workflows": {
				"entries": [
					{
						"name": "actionlint.yml",
						"object": {
							"text": "name: Lint GitHub Actions workflows\n\non:\n    push:\n      branches:\n        - develop\n    pull_request:\n      paths:\n        - '.github/**'\n\npermissions: read-all\n\njobs:\n  actionlint:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout the repository\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      - name: Add problem matcher\n        run: echo \"::add-matcher::.github/actionlint-matcher.json\"\n      - name: Check workflow files\n        uses: docker://rhysd/actionlint:1.7.7@sha256:1d74bfc9fd1963af8f89a7c22afaaafd42f49aad711a09951d02cb996398f61d\n        with:\n          args: -color -shellcheck=\n"
						}
					},
					{
						"name": "codeql-analysis.yml",
						"object": {
							"text": "# For most projects, this workflow file will not need changing; you simply need\n# to commit it to your repository.\n#\n# You may wish to alter this file to override the set of languages analyzed,\n# or to provide custom queries or build logic.\n#\n# ******** NOTE ********\n# We have attempted to detect the languages in your repository. Please check\n# the `language` matrix defined below to confirm you have the correct set of\n# supported CodeQL languages.\n#\nname: \"CodeQL\"\n\non:\n  push:\n    branches: [ \"develop\", \"main\" ]\n  pull_request:\n    branches: [ \"develop\" ]\n  schedule:\n    - cron: '39 21 * * 4'\n\npermissions:\n  contents: read\n\njobs:\n  analyze:\n    name: Analyze (${{ matrix.language }})\n    # Runner size impacts CodeQL analysis time. To learn more, please see:\n    #   - https://gh.io/recommended-hardware-resources-for-running-codeql\n    #   - https://gh.io/supported-runners-and-hardware-resources\n    #   - https://gh.io/using-larger-runners (GitHub.com only)\n    # Consider using larger runners or machines with greater resources for possible analysis time improvements.\n    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}\n    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}\n    permissions:\n      # required for all workflows\n      security-events: write\n\n      # required to fetch internal or private CodeQL packs\n      packages: read\n\n      # only required for workflows in private repositories\n      actions: read\n      contents: read\n\n    strategy:\n      fail-fast: false\n      matrix:\n        include:\n        - language: python\n          build-mode: none\n        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'\n        # Use `c-cpp` to analyze code written in C, C++ or both\n        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both\n        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both\n        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,\n        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.\n        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how\n        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1\n      with:\n        languages: ${{ matrix.language }}\n        build-mode: ${{ matrix.build-mode }}\n        # If you wish to specify custom queries, you can do so here or in a config file.\n        # By default, queries listed here will override any specified in a config file.\n        # Prefix the list here with \"+\" to use these queries and those in the config file.\n\n        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs\n        # queries: security-extended,security-and-quality\n\n    # If the analyze step fails for one of the languages you are analyzing with\n    # \"We were unable to automatically build your code\", modify the matrix above\n    # to set the build mode to \"manual\" for that language. Then modify this step\n    # to build your code.\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun\n    - if: matrix.build-mode == 'manual'\n      shell: bash\n      run: |\n        echo 'If you are using a \"manual\" build mode for one or more of the' \\\n          'languages you are analyzing, replace this with the commands to build' \\\n          'your code, for example:'\n        echo '  make bootstrap'\n        echo '  make release'\n        exit 1\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@f1f6e5f6af878fb37288ce1c627459e94dbf7d01 # v3.30.1\n      with:\n        category: \"/language:${{matrix.language}}\"\n"
						}
					},
					{
						"name": "conventional-pr.yml",
						"object": {
							"text": "name: \"Lint PR title\"\n\non:\n  pull_request_target:\n    types:\n      - opened\n      - edited\n      - synchronize\n    branches:\n      - 'main'\n      - 'develop'\npermissions:\n  contents: read\n\njobs:\n  lint:\n    if: ${{ github.head_ref != 'develop' }}\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout code\n      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n\n    - name: Install dependencies\n      run: npm install @commitlint/cli @commitlint/config-conventional\n\n    - name: Validate PR title\n      run: |\n        PR_TITLE=$(jq -r '.pull_request.title' \"$GITHUB_EVENT_PATH\")\n        echo \"$PR_TITLE\" | npx commitlint --config commitlint.config.js\n"
						}
					},
					{
						"name": "docs-update.yml",
						"object": {
							"text": "# This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\nname: Trestle Docs update\non:\n  push:\n    branches:\n    - develop\n    tags:\n    - v*\n\njobs:\n  set-versions:\n    runs-on: ubuntu-latest\n    outputs:\n      min: ${{ steps.versions.outputs.min }}\n      max: ${{ steps.versions.outputs.max }}\n    steps:\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n    - id: versions\n      run: |\n        min_version=$(jq '.PYTHON_MIN' -r version.json)\n        max_version=$(jq '.PYTHON_MAX' -r version.json)\n        echo \"min=$min_version\" \n        echo \"max=$max_version\"\n        echo \"min=$min_version\" >> $GITHUB_OUTPUT\n        echo \"max=$max_version\" >> $GITHUB_OUTPUT\n  mike-version:\n    runs-on: ubuntu-latest\n    needs: [ set-versions ]\n    outputs:\n      mver: ${{ steps.versions.outputs.mver }}\n    steps:\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n    - name: Set up Python ${{ needs.set-versions.outputs.max }}\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      # This is deliberately not using a custom credential as it relies on native github actions token to have push rights.\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - id: versions\n      env:\n        REF: ${{ github.event.ref }}\n      run: |\n        mike_version=$(python ./scripts/mike_version_parse.py \"$REF\")\n        echo \"mver=$mike_version\" >> $GITHUB_OUTPUT\n  deploy-docs:\n    runs-on: ubuntu-latest\n    needs: [ mike-version, set-versions ]\n    steps:\n    - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1\n      id: app-token\n      with:\n        app-id: ${{ secrets.APP_ID }}\n        private-key: ${{ secrets.PRIVATE_KEY }}\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n        fetch-depth: 0\n        token: ${{ steps.app-token.outputs.token }}\n    - name: Set up Python ${{ needs.set-versions.outputs.max }}\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      # This is deliberately not using a custom credential as it relies on native github actions token to have push rights.\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Install documenation dependencies\n      run: |\n        make docs-ubuntu-deps\n    \n    - name: Get GitHub App User ID\n      id: get-user-id\n      run: echo \"user-id=$(gh api \"/users/${{ env.SLUG }}[bot]\" --jq .id)\" >> \"$GITHUB_OUTPUT\"\n      env:\n        GH_TOKEN: ${{ steps.app-token.outputs.token }}\n        SLUG: ${{ steps.app-token.outputs.app-slug }}\n    - name: Configure Git\n      run: |\n        git config --global user.name '${{ env.SLUG }}[bot]'\n        git config --global user.email '${{ env.ID }}+${{ env.SLUG }}[bot]@users.noreply.github.com'\n      env:\n        SLUG: ${{ steps.app-token.outputs.app-slug }}\n        ID: ${{ steps.get-user-id.outputs.user-id }}\n    - name: Create release\n      shell: bash\n      run: |\n        mike deploy --push ${{ needs.mike-version.outputs.mver }}\n    - name: Ensure latest is latest\n      shell: bash\n      run: | \n        mike set-default latest"
						}
					},
					{
						"name": "python-push.yml",
						"object": {
							"text": "# This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\nname: Trestle Deploy\n\n\n\non:\n  push:\n    branches:\n      - main\n\npermissions: {}\n\njobs:\n  set-versions:\n    runs-on: ubuntu-latest\n    outputs:\n      min: ${{ steps.versions.outputs.min }}\n      max: ${{ steps.versions.outputs.max }}\n    steps:\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n    - id: versions\n      run: |\n        min_version=$(jq '.PYTHON_MIN' -r version.json)\n        max_version=$(jq '.PYTHON_MAX' -r version.json)\n        echo \"min=$min_version\" \n        echo \"max=$max_version\"\n        echo \"min=$min_version\" >> $GITHUB_OUTPUT\n        echo \"max=$max_version\" >> $GITHUB_OUTPUT\n  build:\n    needs: set-versions\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        include:\n        - os: ubuntu-latest\n          path: ~/.cache/pip\n        - os: macos-latest\n          path: ~/Library/Caches/pip\n        - os: windows-latest\n          path: ~\\AppData\\Local\\pip\\Cache\n        python-version: [ '${{ needs.set-versions.outputs.min }}', '${{ needs.set-versions.outputs.max }}']\n\n    steps:\n    - name: Don't mess with  line endings\n      run: |\n        git config --global core.autocrlf false\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ matrix.python-version }}\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: ${{ matrix.path }}\n        key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('setup.cfg') }}\n        restore-keys: |\n         ${{ matrix.os }}-${{ matrix.python-version }}-pip-\n    - name: Is core test version\n      id: core-version\n      run: echo \"core=${{ (matrix.os == 'ubuntu-latest' && matrix.python-version == needs.set-versions.outputs.max ) }}\" >> $GITHUB_OUTPUT\n\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Setup pre-commit\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make pre-commit\n    - name: Install dependencies\n      run: |\n        make install\n    - name: Run md document formatting (mdformat)\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make mdformat\n    - name: Run code formatting (yapf)\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make code-format\n    - name: Run code linting (flake8)\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make code-lint\n    - name: Run code typing check (mypy)\n      if: steps.core-version.outputs.core == 'true'\n      continue-on-error: true \n      run: |\n        make code-typing\n    - name: Install documenation dependencies\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make docs-ubuntu-deps\n    - name: Validate website content (mkdocs)\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make docs-validate\n    - name: Pytest Fast\n      if: steps.core-version.outputs.core != 'true'\n      run: |\n        make test\n    - name: Pytest Cov\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make test-cov\n  deploy:\n    runs-on: ubuntu-latest\n    needs: [ build, set-versions ]\n    permissions:\n      id-token: write\n    environment:\n      name: release\n      url: https://pypi.org/p/compliance-trestle\n    if: github.ref == 'refs/heads/main' && github.repository == 'oscal-compass/compliance-trestle'\n    steps:\n    - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1\n      id: app-token\n      with:\n        app-id: ${{ secrets.APP_ID }}\n        private-key: ${{ secrets.PRIVATE_KEY }}\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n        fetch-depth: 0\n        token: ${{ steps.app-token.outputs.token }}\n    - name: Set up Python ${{ needs.set-versions.outputs.max }}\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - name: Install build tools\n      run: |\n        make develop\n\n    # This action uses Python Semantic Release v8\n    - name: Python Semantic Release\n      id: release\n      uses: python-semantic-release/python-semantic-release@5b9d941d5b29da138b933660ce1a9df75b54ce25 # v10.3.1\n      with:\n        github_token: ${{ steps.app-token.outputs.token }}\n\n    - name: Publish package distributions to PyPI\n      uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e # release/v1\n      # NOTE: DO NOT wrap the conditional in ${{ }} as it will always evaluate to true.\n      # See https://github.com/actions/runner/issues/1173\n      if: steps.release.outputs.released == 'true'\n\n    - name: Publish package distributions to GitHub Releases\n      uses: python-semantic-release/upload-to-gh-release@0a92b5d7ebfc15a84f9801ebd1bf706343d43711 # v9.8.9\n      if: steps.release.outputs.released == 'true'\n      with:\n        github_token: ${{ steps.app-token.outputs.token }}\n\n  merge-main-to-develop:\n    name: Merge main -> develop\n    runs-on: ubuntu-latest\n    needs: deploy\n    concurrency:\n      group: ${{ github.ref }}-${{ github.workflow }}-${{ github.job }}-main\n      cancel-in-progress: true\n    if: github.ref == 'refs/heads/main'\n    steps:\n    - uses: actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b # v2.1.1\n      id: app-token\n      with:\n        app-id: ${{ secrets.APP_ID }}\n        private-key: ${{ secrets.PRIVATE_KEY }}\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n        ref: main\n        fetch-depth: 0\n        token: ${{ steps.app-token.outputs.token }}\n    - name: Get GitHub App User ID\n      id: get-user-id\n      run: echo \"user-id=$(gh api \"/users/${{ env.SLUG }}[bot]\" --jq .id)\" >> \"$GITHUB_OUTPUT\"\n      env:\n        GH_TOKEN: ${{ steps.app-token.outputs.token }}\n        SLUG: ${{ steps.app-token.outputs.app-slug }}\n    - name: Configure Git\n      run: |\n        git config --global user.name '${{ env.SLUG }}[bot]'\n        git config --global user.email '${{ env.ID }}+${{ env.SLUG }}[bot]@users.noreply.github.com'\n      env:\n        SLUG: ${{ steps.app-token.outputs.app-slug }}\n        ID: ${{ steps.get-user-id.outputs.user-id }}\n      # https://docs.github.com/en/actions/security-for-github-actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable\n    - name: Merge Main to Develop\n      run: |\n        git checkout develop\n        git merge --no-ff main -m \"chore: Merge back version tags and changelog into develop.\"\n        git push origin develop\n"
						}
					},
					{
						"name": "python-test.yml",
						"object": {
							"text": "# This workflow will install Python dependencies, run tests and lint with a variety of Python versions\n# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions\nname: Trestle PR pipeline\non:\n  pull_request:\n  push:\n    branches:\n      - develop\njobs:\n  set-versions:\n    runs-on: ubuntu-latest\n    outputs:\n      min: ${{ steps.versions.outputs.min }}\n      max: ${{ steps.versions.outputs.max }}\n    steps:\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n    - id: versions\n      run: |\n        min_version=$(jq '.PYTHON_MIN' -r version.json)\n        max_version=$(jq '.PYTHON_MAX' -r version.json)\n        echo \"min=$min_version\" >> $GITHUB_OUTPUT\n        echo \"max=$max_version\" >> $GITHUB_OUTPUT\n  lint:\n    needs: set-versions\n    runs-on: ubuntu-latest\n    steps:\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n    - name: Set up Python\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: ~/.cache/pip\n        key: ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-${{ hashFiles('setup.cfg') }}\n        restore-keys: |\n          ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Setup pre-commit\n      run: |\n        make pre-commit\n    - name: Install dependencies\n      run: |\n        make install\n    - name: Run md document formatting (mdformat)\n      run: |\n        make mdformat\n    - name: Run code formatting (yapf)\n      run: |\n        make code-format\n    - name: Run code linting (flake8)\n      run: |\n        make code-lint\n    - name: Run code typing check (mypy)\n      continue-on-error: true\n      run: |\n        make code-typing\n    - name: Install documenation dependencies\n      run: |\n        make docs-ubuntu-deps\n    - name: Validate website content (mkdocs)\n      run: |\n        make docs-validate\n    - name: Check if dirty (mkdocs)\n      run: |\n        make check-for-changes\n\n# This test simulates what it is like for a user to install trestle today.\n# Coverage cannot be calculated as part of\n  bdist:\n    needs: set-versions\n    runs-on: ubuntu-latest\n    steps:\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n    - name: Set up Python\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: ~/.cache/pip\n        key: ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-${{ hashFiles('setup.cfg') }}\n        restore-keys: |\n          ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Run binary tests\n      run: |\n        make test-bdist\n\n  test:\n    # This test\n    needs: set-versions\n    runs-on: ${{ matrix.os }}\n    strategy:\n      matrix:\n        os: [ubuntu-latest, macos-latest, windows-latest]\n        python-version: [ '${{ needs.set-versions.outputs.min }}', '${{ needs.set-versions.outputs.max }}' ]\n        include:\n        - os: ubuntu-latest\n          path: ~/.cache/pip\n        - os: macos-latest\n          path: ~/Library/Caches/pip\n        - os: windows-latest\n          path: ~\\AppData\\Local\\pip\\Cache\n    steps:\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        fetch-depth: 0\n        submodules: true\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ matrix.python-version }}\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: ${{ matrix.path }}\n        key: ${{ matrix.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('setup.cfg') }}\n        restore-keys: |\n         ${{ matrix.os }}-${{ matrix.python-version }}-pip-\n    - name: Is core test version\n      id: core-version\n      run: echo \"core=${{ (matrix.os == 'ubuntu-latest' && matrix.python-version == needs.set-versions.outputs.max ) }}\" >> $GITHUB_OUTPUT\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Pytest Fast\n      if: steps.core-version.outputs.core != 'true'\n      run: |\n        make test\n    - name: Pytest Cov\n      if: steps.core-version.outputs.core == 'true'\n      run: |\n        make test-cov\n\n    - name: Upload artifact\n      if: steps.core-version.outputs.core == 'true'\n      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n      with:\n        name: coverage\n        path: coverage.xml\n\n  sonar:\n    if: ${{ (github.event.pull_request.base.repo.url == github.event.pull_request.head.repo.url && github.triggering_actor != 'dependabot[bot]' ) }}\n    runs-on: ubuntu-latest\n    needs: [ test, set-versions]\n    steps:\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - name: Don't mess with line endings\n      run: |\n        git config --global core.autocrlf false\n    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n      with:\n        submodules: true\n    - name: Set up Python\n      uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n      with:\n        python-version: ${{ needs.set-versions.outputs.max }}\n    - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n      with:\n        path: ~/.cache/pip\n        key: ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-${{ hashFiles('setup.cfg') }}\n        restore-keys: |\n          ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-\n    - name: Install build tools\n      run: |\n        make develop\n    - name: Get coverage\n      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0\n      with:\n        name: coverage\n    - name: SonarCloud Scan\n      uses: SonarSource/sonarcloud-github-action@ba3875ecf642b2129de2b589510c81a8b53dbf4e # master\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any\n        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n      with:\n        args: >\n          -Dsonar.python.coverage.reportPaths=coverage.xml\n          -Dsonar.tests=tests/\n          -Dsonar.sources=trestle/ \n          -Dsonar.python.version=${{ needs.set-versions.outputs.max }}\n          -Dsonar.projectKey=compliance-trestle\n          -Dsonar.organization=compliance-trestle\n          -Dsonar.cpd.exclusions=trestle/oscal/*.py\n          -Dsonar.exclusions=trestle/oscal/*.py\n    - name: SonarQube Quality Gate check\n      uses: sonarsource/sonarqube-quality-gate-action@df914238f99aa5d81f4490aeea80f205c7ed9600 # master\n      # Force to fail step after specific time\n      timeout-minutes: 5\n      env:\n       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}\n\n  snyk:\n    if: ${{ (github.event.pull_request.base.repo.url == github.event.pull_request.head.repo.url && github.triggering_actor != 'dependabot[bot]' ) }}\n    runs-on: ubuntu-latest\n    needs: [ set-versions ]\n    steps:\n      - name: Don't mess with line endings\n        run: |\n          git config --global core.autocrlf false\n      - name: Don't mess with line endings\n        run: |\n          git config --global core.autocrlf false\n      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n        with:\n          submodules: true\n      - name: Set up Python\n        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0\n        with:\n          python-version: ${{ needs.set-versions.outputs.max }}\n      - uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4\n        with:\n          path: ~/.cache/pip\n          key: ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-${{ hashFiles('setup.cfg') }}\n          restore-keys: |\n            ubuntu-latest-${{ needs.set-versions.outputs.max }}-pip-\n      - uses: ./.github/actions/snyk-test\n        with:\n          token: ${{ secrets.SNYK_TOKEN }}\n"
						}
					},
					{
						"name": "scorecard.yml",
						"object": {
							"text": "name: Scorecard analysis workflow\non:\n  push:\n    # Targeting the develop branch\n    branches:\n    - develop\n  schedule:\n    # Weekly on Saturdays.\n    - cron:  '30 1 * * 6'\n\npermissions: read-all\n\njobs:\n  analysis:\n    name: Scorecard Analysis\n    runs-on: ubuntu-latest\n    permissions:\n      security-events: write\n      id-token: write\n\n    steps:\n      - name: \"Checkout Code\"\n        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0\n        with:\n          persist-credentials: false\n\n      - name: \"Run Analysis\"\n        uses: ossf/scorecard-action@05b42c624433fc40578a4040d5cf5e36ddca8cde # v2.4.2\n        with:\n          results_file: results.sarif\n          results_format: sarif\n          # Let's see the results\n          publish_results: true\n\n      # Upload the artifacts\n      # https://docs.github.com/en/actions/advanced-guides/storing-workflow-data-as-artifacts\n      - name: \"Upload artifact\"\n        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2\n        with:\n          name: SARIF file\n          path: results.sarif\n          retention-days: 5\n"
						}
					},
					{
						"name": "stale.yml",
						"object": {
							"text": "name: Stale Issues and PRs\non:\n  schedule:\n  - cron: '17 1 * * *'\n  workflow_dispatch:\n\npermissions:\n    contents: read\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    permissions:\n        issues: write\n        pull-requests: write\n    env:\n        STALE_WARNING_DAYS: 90\n        STALE_CLOSURE_DAYS: 30\n    steps:\n    - uses: actions/stale@3a9db7e6a41a89f618792c92c0e97cc736e1b13f # v9\n      with:\n        stale-issue-label: stale\n        exempt-issue-labels: good-first-issue, help-wanted, exempt-from-stale\n        stale-issue-message: >\n          This issue has been automatically marked as stale because it has not had activity within ${{ env.STALE_WARNING_DAYS }} days.\n          It will be automatically closed if no further activity occurs within ${{ env.STALE_CLOSURE_DAYS }} days.\n        close-issue-message: >\n          This issue has been automatically closed due to inactivity.\n        days-before-issue-stale: ${{ env.STALE_WARNING_DAYS }}\n        days-before-issue-close: ${{ env.STALE_CLOSURE_DAYS }}\n        stale-pr-label: stale\n        stale-pr-message: >\n          This pull request has been automatically marked as stale because it has not had activity within ${{ env.STALE_WARNING_DAYS }} days.\n          It will be automatically closed if no further activity occurs within ${{ env.STALE_CLOSURE_DAYS }} days.\n        close-pr-message: >\n          This pull request has been automatically closed due to inactivity. Please reopen if this PR is still being worked on.\n        days-before-pr-stale: ${{ env.STALE_WARNING_DAYS }}\n        days-before-pr-close: ${{ env.STALE_CLOSURE_DAYS }}"
						}
					}
				]
			}
		}
	}
}