{
	"data": {
		"repository": {
			"name": "harbor",
			"nameWithOwner": "goharbor/harbor",
			"url": "https://github.com/goharbor/harbor",
			"description": "An open source trusted cloud native registry project that stores, signs, and scans content.",
			"releases": {
				"nodes": [
					{
						"name": "Harbor 0.1.0",
						"tagName": "0.1.0",
						"url": "https://github.com/goharbor/harbor/releases/tag/0.1.0",
						"createdAt": "2016-03-11T07:19:43Z",
						"releaseAssets": {
							"nodes": [
								{
									"name": "harbor_0.1.0.tgz",
									"downloadUrl": "https://github.com/goharbor/harbor/releases/download/0.1.0/harbor_0.1.0.tgz"
								}
							]
						}
					}
				]
			},
			"workflows": {
				"entries": [
					{
						"name": "CI.yml",
						"object": {
							"text": "name: CI\nenv:\n   POSTGRESQL_HOST: localhost\n   POSTGRESQL_PORT: 5432\n   POSTGRESQL_USR: postgres\n   POSTGRESQL_PWD: root123\n   POSTGRESQL_DATABASE: registry\n   DOCKER_COMPOSE_VERSION: 2.27.1\n   HARBOR_ADMIN: admin\n   HARBOR_ADMIN_PASSWD: Harbor12345\n   CORE_SECRET: tempString\n   KEY_PATH: \"/data/secret/keys/secretkey\"\n   REDIS_HOST: localhost\n   REG_VERSION: v2.7.1-patch-2819-2553\n   UI_BUILDER_VERSION: 1.6.0\n\non:\n  # the paths-ignore is the same as the paths in pass-CI.yml, they should be synced together\n  # see https://web.archive.org/web/20230506145443/https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/managing-protected-branches/troubleshooting-required-status-checks#handling-skipped-but-required-checks\n  pull_request:\n    paths-ignore:\n      - 'docs/**'\n      - '**.md'\n      - 'tests/**'\n      - '!tests/**.sh'\n      - '!tests/apitests/**'\n      - '!tests/ci/**'\n      - '!tests/resources/**'\n      - '!tests/robot-cases/**'\n      - '!tests/robot-cases/Group1-Nightly/**'      \n  push:\n    # the paths-ignore is the same as the paths in pass-CI.yml, they should be synced together\n    paths-ignore:\n      - 'docs/**'\n      - '**.md'\n      - 'tests/**'\n      - '!tests/**.sh'\n      - '!tests/apitests/**'\n      - '!tests/ci/**'\n      - '!tests/resources/**'\n      - '!tests/robot-cases/**'\n      - '!tests/robot-cases/Group1-Nightly/**'\n\njobs:\n  UTTEST:\n    env:\n       UTTEST: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - name: Set up Go 1.23\n        uses: actions/setup-go@v5\n        with:\n           go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n         path: src/github.com/goharbor/harbor\n      - name: setup env\n        run: |\n          cd src/github.com/goharbor/harbor\n          pwd\n          go env\n          echo \"GOPATH=$(go env GOPATH):$GITHUB_WORKSPACE\" >> $GITHUB_ENV\n          echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n          echo \"TOKEN_PRIVATE_KEY_PATH=${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem\" >> $GITHUB_ENV\n        shell: bash\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          #sudo apt install -y xvfb\n          #xvfb-run ls\n          curl -L https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n          IP=`hostname -I | awk '{print $1}'`\n          echo '{\"insecure-registries\" : [\"'$IP':5000\"]}' | sudo tee /etc/docker/daemon.json\n          echo \"IP=$IP\" >> $GITHUB_ENV\n          sudo cp ./tests/harbor_ca.crt /usr/local/share/ca-certificates/\n          sudo update-ca-certificates\n          sudo service docker restart\n      - name: install\n        run: |\n          cd src/github.com/goharbor/harbor\n          env\n          df -h\n          bash ./tests/showtime.sh ./tests/ci/ut_install.sh\n      - name: script\n        run: |\n          echo IP: $IP\n          df -h\n          cd src/github.com/goharbor/harbor\n          bash ./tests/showtime.sh ./tests/ci/ut_run.sh $IP\n          df -h\n      - name: Codecov For BackEnd\n        uses: codecov/codecov-action@v5\n        with:\n          files: ./src/github.com/goharbor/harbor/profile.cov\n          flags: unittests\n\n  APITEST_DB:\n    env:\n      APITEST_DB: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - name: Set up Go 1.23\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: setup env\n        run: |\n          cd src/github.com/goharbor/harbor\n          pwd\n          go env\n          echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" >> $GITHUB_ENV\n          echo \"GOPATH=$(go env GOPATH):$GITHUB_WORKSPACE\" >> $GITHUB_ENV\n          echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n          echo \"TOKEN_PRIVATE_KEY_PATH=${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem\" >> $GITHUB_ENV\n          IP=`hostname -I | awk '{print $1}'`\n          echo \"IP=$IP\" >> $GITHUB_ENV\n        shell: bash\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          df -h\n          #sudo apt install -y xvfb\n          #xvfb-run ls\n          curl -L https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n      - name: install\n        run: |\n          cd src/github.com/goharbor/harbor\n          env\n          df -h\n          docker system prune -a -f\n          bash ./tests/showtime.sh ./tests/ci/api_common_install.sh $IP DB\n      - name: script\n        run: |\n          cd src/github.com/goharbor/harbor\n          echo IP: $IP\n          df -h\n          bash ./tests/showtime.sh ./tests/ci/api_run.sh DB $IP\n          df -h\n      - name: upload_logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: db-api-harbor-logs.tar.gz\n          path: /home/runner/work/harbor/harbor/src/github.com/goharbor/harbor/integration_logs.tar.gz\n          retention-days: 5\n  APITEST_DB_PROXY_CACHE:\n    env:\n      APITEST_DB: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - name: Set up Go 1.23\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: setup env\n        run: |\n          cd src/github.com/goharbor/harbor\n          pwd\n          go env\n          echo \"GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}\" >> $GITHUB_ENV\n          echo \"GOPATH=$(go env GOPATH):$GITHUB_WORKSPACE\" >> $GITHUB_ENV\n          echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n          echo \"TOKEN_PRIVATE_KEY_PATH=${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem\" >> $GITHUB_ENV\n          IP=`hostname -I | awk '{print $1}'`\n          echo \"IP=$IP\" >> $GITHUB_ENV\n        shell: bash\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          df -h\n          #sudo apt install -y xvfb\n          #xvfb-run ls\n          curl -L https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n      - name: install\n        run: |\n          cd src/github.com/goharbor/harbor\n          env\n          df -h\n          docker system prune -a -f\n          bash ./tests/showtime.sh ./tests/ci/api_common_install.sh $IP DB\n      - name: script\n        run: |\n          cd src/github.com/goharbor/harbor\n          echo IP: $IP\n          df -h\n          bash ./tests/showtime.sh ./tests/ci/api_run.sh PROXY_CACHE $IP\n          df -h\n      - name: upload_logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: proxy-api-harbor-logs.tar.gz\n          path: /home/runner/work/harbor/harbor/src/github.com/goharbor/harbor/integration_logs.tar.gz\n          retention-days: 5\n  APITEST_LDAP:\n    env:\n      APITEST_LDAP: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - name: Set up Go 1.23\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: setup env\n        run: |\n          cd src/github.com/goharbor/harbor\n          pwd\n          go env\n          echo \"GOPATH=$(go env GOPATH):$GITHUB_WORKSPACE\" >> $GITHUB_ENV\n          echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n          echo \"TOKEN_PRIVATE_KEY_PATH=${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem\" >> $GITHUB_ENV\n          IP=`hostname -I | awk '{print $1}'`\n          echo \"IP=$IP\" >> $GITHUB_ENV\n        shell: bash\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          df -h\n          #sudo apt install -y xvfb\n          #xvfb-run ls\n          curl -L https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n      - name: install\n        run: |\n          cd src/github.com/goharbor/harbor\n          env\n          df -h\n          bash ./tests/showtime.sh ./tests/ci/api_common_install.sh $IP LDAP\n      - name: script\n        run: |\n          echo IP: $IP\n          df -h\n          cd src/github.com/goharbor/harbor\n          bash ./tests/showtime.sh ./tests/ci/api_run.sh LDAP $IP\n          df -h\n      - name: upload_logs\n        uses: actions/upload-artifact@v4\n        with:\n          name: ldap-api-harbor-logs.tar.gz\n          path: /home/runner/work/harbor/harbor/src/github.com/goharbor/harbor/integration_logs.tar.gz\n          retention-days: 5\n  OFFLINE:\n    env:\n      OFFLINE: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - name: Set up Go 1.23\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: setup env\n        run: |\n          cd src/github.com/goharbor/harbor\n          pwd\n          docker version\n          go env\n          echo \"GOPATH=$(go env GOPATH):$GITHUB_WORKSPACE\" >> $GITHUB_ENV\n          echo \"$(go env GOPATH)/bin\" >> $GITHUB_PATH\n          echo \"TOKEN_PRIVATE_KEY_PATH=${GITHUB_WORKSPACE}/src/github.com/goharbor/harbor/tests/private_key.pem\" >> $GITHUB_ENV\n        shell: bash\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          df -h\n          #sudo apt install -y xvfb\n          #xvfb-run ls\n          curl -L https://github.com/docker/compose/releases/download/v${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n          IP=`hostname -I | awk '{print $1}'`\n          echo '{\"insecure-registries\" : [\"'$IP':5000\"]}' | sudo tee /etc/docker/daemon.json\n          echo \"IP=$IP\" >> $GITHUB_ENV\n          sudo cp ./tests/harbor_ca.crt /usr/local/share/ca-certificates/\n          sudo update-ca-certificates\n          sudo service docker restart\n      - name: script\n        run: |\n          echo IP: $IP\n          df -h\n          cd src/github.com/goharbor/harbor\n          bash ./tests/showtime.sh ./tests/ci/distro_installer.sh\n          df -h\n\n  UI_UT:\n    env:\n      UI_UT: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    timeout-minutes: 100\n    steps:\n      - uses: actions/setup-node@v5\n        with:\n          node-version: '18'\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: script\n        run: |\n          echo IP: $IP\n          df -h\n          cd src/github.com/goharbor/harbor\n          bash ./tests/showtime.sh ./tests/ci/ui_ut_run.sh\n          df -h\n      - name: Codecov For UI\n        uses: codecov/codecov-action@v5\n        with:\n          files: ./src/github.com/goharbor/harbor/src/portal/coverage/lcov.info\n          flags: unittests"
						}
					},
					{
						"name": "auto_assign_prs.yml",
						"object": {
							"text": "---\nname: \"Auto Assign\"\n\n# pull_request_target means that this will run on pull requests, but in\n# the context of the base repo. This should mean PRs from forks are supported.\non:\n  pull_request_target:\n    types: [opened, reopened, ready_for_review]\n\njobs:\n  # Automatically assigns reviewers and owner\n  add-reviews:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Set the author of a PR as the assignee\n        uses: kentaro-m/auto-assign-action@v2.0.0\n        with:\n          configuration-path: \".github/auto-assignees.yml\"\n"
						}
					},
					{
						"name": "build-package.yml",
						"object": {
							"text": "name: \"Build Package Workflow\"\nenv:\n  DOCKER_COMPOSE_VERSION: 1.23.0\n\non:\n  push:\n    branches:\n      - main\n      - release-*\n\njobs:\n  BUILD_PACKAGE:\n    env:\n        BUILD_PACKAGE: true\n    runs-on:\n      - ubuntu-22.04\n    steps:\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v5.0.0\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n      - name: Set up Go 1.22\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - name: Setup Docker\n        uses: docker-practice/actions-setup-docker@master\n        with:\n          docker_version: 20.10\n          docker_channel: stable\n      - uses: actions/checkout@v5\n      - uses: jitterbit/get-changed-files@v1\n        id: changed-files\n        with:\n          format: space-delimited\n          token: ${{ secrets.GITHUB_TOKEN }}\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: Build Base Image\n        if: |\n            contains(steps.changed-files.outputs.modified, 'Dockerfile.base') ||\n            contains(steps.changed-files.outputs.modified, 'VERSION') ||\n            contains(steps.changed-files.outputs.modified, '.buildbaselog') ||\n            github.ref == 'refs/heads/main'\n        run: |\n          set -x\n          echo \"BUILD_BASE=true\" >> $GITHUB_ENV\n      - name: Build Package\n        run: |\n          set -x\n          env\n          df -h\n          harbor_target_bucket=\"\"\n          target_branch=\"$(echo ${GITHUB_REF#refs/heads/})\"\n          harbor_offline_build_bundle=\"\"\n          harbor_online_build_bundle=\"\"\n          harbor_logs_bucket=\"harbor-ci-logs\"\n          harbor_builds_bucket=\"harbor-builds\"\n          harbor_releases_bucket=\"harbor-releases\"\n          harbor_ci_pipeline_store_bucket=\"harbor-ci-pipeline-store/latest\"\n          # the target release version is the version of next release(RC or GA). It needs to be updated on creating new release branch.\n          target_release_version=$(cat ./VERSION)\n          Harbor_Package_Version=$target_release_version-'build.'$GITHUB_RUN_NUMBER\n\n          if [[ $target_branch == \"main\" ]]; then\n            Harbor_Assets_Version=$Harbor_Package_Version\n            harbor_target_bucket=$harbor_builds_bucket\n          else\n            Harbor_Assets_Version=$target_release_version\n            harbor_target_bucket=$harbor_releases_bucket/$target_branch\n          fi\n\n          if [[ $target_branch == \"release-\"* ]]; then\n            Harbor_Build_Base_Tag=$target_release_version\n          else\n            Harbor_Build_Base_Tag=dev\n          fi\n\n          build_base_params=\" BUILD_BASE=false\"\n          cd src/github.com/goharbor/harbor\n          if [ -z \"$BUILD_BASE\"  ] || [ \"$BUILD_BASE\" != \"true\"  ]; then\n            echo \"Do not need to build base images!\"\n          else\n            build_base_params=\" BUILD_BASE=true PULL_BASE_FROM_DOCKERHUB=true PUSHBASEIMAGE=true REGISTRYUSER=\\\"${{ secrets.DOCKER_HUB_USERNAME }}\\\" REGISTRYPASSWORD=\\\"${{ secrets.DOCKER_HUB_PASSWORD }}\\\"\"\n          fi\n          sudo make package_offline GOBUILDTAGS=\"include_oss include_gcs\" BASEIMAGETAG=${Harbor_Build_Base_Tag} VERSIONTAG=${Harbor_Assets_Version} PKGVERSIONTAG=${Harbor_Package_Version} TRIVYFLAG=true EXPORTERFLAG=true HTTPPROXY= ${build_base_params}\n          sudo make package_online GOBUILDTAGS=\"include_oss include_gcs\" BASEIMAGETAG=${Harbor_Build_Base_Tag} VERSIONTAG=${Harbor_Assets_Version} PKGVERSIONTAG=${Harbor_Package_Version} TRIVYFLAG=true EXPORTERFLAG=true HTTPPROXY= ${build_base_params}\n          harbor_offline_build_bundle=$(basename harbor-offline-installer-*.tgz)\n          harbor_online_build_bundle=$(basename harbor-online-installer-*.tgz)\n          echo \"Package name is: $harbor_offline_build_bundle\"\n          echo \"Package name is: $harbor_online_build_bundle\"\n\n          source tests/ci/build_util.sh\n          cp ${harbor_offline_build_bundle}                 harbor-offline-installer-latest.tgz\n          cp ${harbor_online_build_bundle}                  harbor-online-installer-latest.tgz\n          uploader ${harbor_offline_build_bundle}           $harbor_target_bucket\n          uploader ${harbor_online_build_bundle}            $harbor_target_bucket\n          uploader harbor-offline-installer-latest.tgz      $harbor_target_bucket\n          uploader harbor-online-installer-latest.tgz       $harbor_target_bucket\n          echo \"BUILD_BUNDLE=$harbor_offline_build_bundle\" >> $GITHUB_ENV\n\n          publishImage $target_branch $Harbor_Assets_Version \"${{ secrets.DOCKER_HUB_USERNAME }}\" \"${{ secrets.DOCKER_HUB_PASSWORD }}\"\n"
						}
					},
					{
						"name": "codeql-analysis.yml",
						"object": {
							"text": "name: \"Code scanning - action\"\n\non:\n  push:\n  pull_request:\n  schedule:\n    - cron: '0 16 * * 6'\n\njobs:\n  CodeQL-Build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout repository\n      uses: actions/checkout@v5\n      with:\n        # We must fetch at least the immediate parents so that if this is\n        # a pull request then we can checkout the head.\n        fetch-depth: 2\n\n    # If this run was triggered by a pull request event, then checkout\n    # the head of the pull request instead of the merge commit.\n    - run: git checkout HEAD^2\n      if: ${{ github.event_name == 'pull_request' }}\n\n    # Initializes the CodeQL tools for scanning.\n    - name: Initialize CodeQL\n      uses: github/codeql-action/init@v3\n      # Override language selection by uncommenting this and choosing your languages\n      # with:\n      #   languages: go, javascript, csharp, python, cpp, java\n\n    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).\n    # If this step fails, then you should remove it and run the build manually (see below)\n    #- name: Autobuild\n    #  uses: github/codeql-action/autobuild@v1\n\n    # ℹ️ Command-line programs to run using the OS shell.\n    # 📚 https://git.io/JvXDl\n\n    # ✏️ If the Autobuild fails above, remove it and uncomment the following three lines\n    #    and modify them (or add more) to build your code if your project\n    #    uses a compiled language\n\n    #- run: |\n    #   make bootstrap\n    #   make release\n\n    # to make sure autobuild success, specifify golang version in go.mod\n    # https://github.com/github/codeql/issues/15647#issuecomment-2003768106\n\n    - name: Perform CodeQL Analysis\n      uses: github/codeql-action/analyze@v3\n"
						}
					},
					{
						"name": "conformance_test.yml",
						"object": {
							"text": "name: CONFORMANCE_TEST\nenv:\n  DOCKER_COMPOSE_VERSION: 1.23.0\n\non:\n  repository_dispatch:\n    types:\n      - manual-trigger-conformance\n  schedule:\n    - cron: '0 6 * * *'\n\njobs:\n  CONFORMANCE_TEST:\n    env:\n      CONFORMANCE_TEST: true\n    runs-on:\n      #- self-hosted\n      - ubuntu-latest\n    steps:\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v5.0.0\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n      - name: Set up Go 1.21\n        uses: actions/setup-go@v5\n        with:\n          go-version: 1.23.2\n        id: go\n      - uses: actions/checkout@v5\n        with:\n          path: src/github.com/goharbor/harbor\n      - name: before_install\n        run: |\n          set -x\n          cd src/github.com/goharbor/harbor\n          pwd\n          env\n          df -h\n          curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname -s`-`uname -m` > docker-compose\n          chmod +x docker-compose\n          sudo mv docker-compose /usr/local/bin\n          IP=`hostname -I | awk '{print $1}'`\n          echo '{\"insecure-registries\" : [\"'$IP':5000\"]}' | sudo tee /etc/docker/daemon.json\n          echo \"IP=$IP\" >> $GITHUB_ENV\n          sudo cp ./tests/harbor_ca.crt /usr/local/share/ca-certificates/\n          sudo update-ca-certificates\n          sudo service docker restart\n      - name: install\n        run: |\n          cd src/github.com/goharbor/harbor\n          env\n          df -h\n          bash ./tests/showtime.sh ./tests/ci/api_common_install.sh $IP DB\n      - name: script\n        run: |\n          echo IP: $IP\n          df -h\n          cd src/github.com/goharbor/harbor\n          bash ./tests/showtime.sh ./tests/ci/conformance_test.sh $IP\n          df -h\n      - name: upload test result to gs\n        run: |\n          cd src/github.com/goharbor/harbor\n          aws s3 cp ./distribution-spec/conformance/report.html s3://harbor-conformance-test/report.html\n        if: always()\n"
						}
					},
					{
						"name": "housekeeping-stale-issues-prs.yaml",
						"object": {
							"text": "name: Housekeeping - Close stale issues and PRs\non:\n  schedule:\n    - cron: '0 9 * * *'\n\njobs:\n  stale:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/stale@v10.0.0\n        with:\n          stale-issue-message: 'This issue is being marked stale due to a period of inactivity. If this issue is still relevant, please comment or remove the stale label. Otherwise, this issue will close in 30 days.'\n          stale-pr-message: 'This PR is being marked stale due to a period of inactivty. If this PR is still relevant, please comment or remove the stale label. Otherwise, this PR will close in 30 days.'\n          close-issue-message: 'This issue was closed because it has been stalled for 30 days with no activity. If this issue is still relevant, please re-open a new issue.'\n          close-pr-message: 'This PR was closed because it has been stalled for 30 days with no activity. If this PR is still relevant, please re-open a new PR against main.'\n          days-before-issue-stale: 60\n          days-before-pr-stale: 60\n          days-before-issue-close: 30\n          days-before-pr-close: 30\n          # Don't add stale label to PRs / issues with milestones \"upcoming\" attached.\n          exempt-milestones: \"upcoming\"\n          # Don't add stale label to PRs / issues with this label\n          exempt-issue-labels: 'never-stale, kind/requirement'\n          exempt-pr-labels: 'never-stale, kind/requirement'\n          # Make it 1000 to clean up a bit then wen can lower it\n          operations-per-run: 1000\n"
						}
					},
					{
						"name": "label_check.yaml",
						"object": {
							"text": "name: Release Note Label Check\n\n# Trigger the workflow on pull requests only\non: \n  pull_request:\n    types: [opened, labeled, unlabeled, synchronize]\n\nenv:\n  GOPROXY: https://proxy.golang.org/\n  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}\njobs:\n  # Ensures correct release-note labels are set:\n  # - At least one label\n  # - At most one two the main category labels\n  check-label:\n    name: Check release-note label set\n    runs-on: ubuntu-latest\n    steps:\n      - uses: mheap/github-action-required-labels@v5\n        with:\n          mode: minimum\n          count: 1\n          labels: \"release-note/ignore-for-release, release-note/new-feature, release-note/update, release-note/enhancement, release-note/community, release-note/breaking-change, release-note/docs, release-note/infra, release-note/deprecation\"\n"
						}
					},
					{
						"name": "nightly-trivy-scan.yml",
						"object": {
							"text": "name: Trivy Nightly Scan\non:\n  schedule:\n    - cron: '0 2 * * *' # run at 2 AM UTC\n\n\njobs:\n  nightly-scan:\n    name: Trivy Scan nightly\n    strategy:\n      fail-fast: false\n      matrix:\n        # maintain the versions of harbor that need to be actively\n        # security scanned\n        versions: [dev, v2.12.0-dev]\n        # list of images that need to be scanned\n        images: [harbor-core, harbor-db, harbor-exporter, harbor-jobservice, harbor-log, harbor-portal, harbor-registryctl, prepare]\n    permissions:\n      security-events: write  # for github/codeql-action/upload-sarif to upload SARIF results\n\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v5\n      - name: Run Trivy vulnerability scanner\n        uses: aquasecurity/trivy-action@master\n        with:\n          image-ref: 'docker.io/goharbor/${{ matrix.images }}:${{ matrix.versions }}'\n          severity: 'CRITICAL,HIGH'\n          format: 'template'\n          template: '@/contrib/sarif.tpl'\n          output: 'trivy-results.sarif'\n        env:\n          # Use AWS' ECR mirror for the trivy-db image, as GitHub's Container\n          # Registry is returning a TOOMANYREQUESTS error.\n          # Ref: https://github.com/aquasecurity/trivy-action/issues/389\n          TRIVY_DB_REPOSITORY: 'public.ecr.aws/aquasecurity/trivy-db:2'\n      - name: Upload Trivy scan results to GitHub Security tab\n        uses: github/codeql-action/upload-sarif@v3\n        with:\n          sarif_file: 'trivy-results.sarif'\n"
						}
					},
					{
						"name": "pass-CI.yml",
						"object": {
							"text": "name: CI\n\non:\n  pull_request:\n    # the paths is the same as the paths-ignore in CI.yml, they should be synced together\n    paths:\n      - 'docs/**'\n      - '**.md'\n      - 'tests/**'\n      - '!tests/**.sh'\n      - '!tests/apitests/**'\n      - '!tests/ci/**'\n      - '!tests/resources/**'\n      - '!tests/robot-cases/**'\n      - '!tests/robot-cases/Group1-Nightly/**'\n  push:\n    # the paths is the same as the paths-ignore in CI.yml, they should be synced together\n    paths:\n      - 'docs/**'\n      - '**.md'\n      - 'tests/**'\n      - '!tests/**.sh'\n      - '!tests/apitests/**'\n      - '!tests/ci/**'\n      - '!tests/resources/**'\n      - '!tests/robot-cases/**'\n      - '!tests/robot-cases/Group1-Nightly/**'\n\njobs:\n  UTTEST:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n\n  APITEST_DB:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n\n  APITEST_DB_PROXY_CACHE:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n\n  APITEST_LDAP:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n\n  OFFLINE:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n\n  UI_UT:\n    runs-on:\n      - ubuntu-latest\n    steps:\n      - run: 'echo \"No run required\"'\n"
						}
					},
					{
						"name": "publish_release.yml",
						"object": {
							"text": "name: Publish Release\n\non:\n  push:\n    tags:\n      - 'v*.*.*'\n\njobs:\n  release:\n    runs-on: ubuntu-22.04\n    steps:\n      - uses: actions/checkout@v5\n      - name: Setup env\n        run: |\n          echo \"CUR_TAG=${{ github.ref_name }}\" >> $GITHUB_ENV\n          echo \"BASE_TAG=$(cat ./VERSION)\" >> $GITHUB_ENV\n          release=$(curl -H \"Authorization: token ${{ secrets.GITHUB_TOKEN }}\" -H \"Accept: application/vnd.github.v3+json\" https://api.github.com/repos/goharbor/harbor/releases/tags/${{ github.ref_name }})\n          echo \"BUILD_NO=$(echo $release | jq -r '.body' | jq -r '.buildNo')\" >> $GITHUB_ENV\n          echo \"PRE_TAG=$(echo $release | jq -r '.body' | jq -r '.preTag')\" >> $GITHUB_ENV\n          echo \"BRANCH=$(echo $release | jq -r '.target_commitish')\" >> $GITHUB_ENV\n          echo \"PRERELEASE=$(echo $release | jq -r '.prerelease')\" >> $GITHUB_ENV\n      - name: Configure AWS credentials\n        uses: aws-actions/configure-aws-credentials@v5.0.0\n        with:\n          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}\n          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}\n          aws-region: us-east-1\n      - name: Prepare Assets\n        run: |\n          if [ ! ${{ env.BUILD_NO }} -o ${{ env.BUILD_NO }} = \"null\" ]\n          then\n              echo \"missing required parameter buildNo.\"\n              exit 1\n          fi\n          echo \"buildNo:${{ env.BUILD_NO }}\"\n          echo \"preTag:${{ env.PRE_TAG }}\"\n\n          src_offline_package=harbor-offline-installer-${{ env.BASE_TAG }}-${{ env.BUILD_NO }}.tgz\n          src_online_package=harbor-online-installer-${{ env.BASE_TAG }}-${{ env.BUILD_NO }}.tgz\n          dst_offline_package=harbor-offline-installer-${{ env.CUR_TAG }}.tgz\n          dst_online_package=harbor-online-installer-${{ env.CUR_TAG }}.tgz\n          aws s3 cp s3://${{ secrets.HARBOR_RELEASE_BUILD }}/${{ env.BRANCH }}/${src_offline_package} s3://${{ secrets.HARBOR_RELEASE_BUILD }}/${{ env.BRANCH }}/${dst_offline_package}\n          aws s3 cp s3://${{ secrets.HARBOR_RELEASE_BUILD }}/${{ env.BRANCH }}/${src_online_package} s3://${{ secrets.HARBOR_RELEASE_BUILD }}/${{ env.BRANCH }}/${dst_online_package}\n\n          assets_path=$(pwd)/assets\n          source tools/release/release_utils.sh && getAssets ${{ secrets.HARBOR_RELEASE_BUILD }} ${{ env.BRANCH }} $dst_offline_package $dst_online_package ${{ env.PRERELEASE }} $assets_path\n          echo \"OFFLINE_PACKAGE_PATH=$assets_path/$dst_offline_package\" >> $GITHUB_ENV\n          echo \"ONLINE_PACKAGE_PATH=$assets_path/$dst_online_package\" >> $GITHUB_ENV\n          echo \"MD5SUM_PATH=$assets_path/md5sum\" >> $GITHUB_ENV\n      - name: Setup Docker\n        uses: docker-practice/actions-setup-docker@master\n        with:\n          docker_version: 20.10\n          docker_channel: stable\n      - name: Publish Images\n        run: |\n          tar -zxf ${{ env.OFFLINE_PACKAGE_PATH }}\n          docker load -i ./harbor/harbor.${{ env.BASE_TAG }}.tar.gz\n          images=\"$(docker images --format \"{{.Repository}}\" --filter=reference='goharbor/*:${{ env.BASE_TAG }}' | xargs)\"\n          source tools/release/release_utils.sh\n          publishImages ${{ env.CUR_TAG }} ${{ env.BASE_TAG }} \"${{ secrets.DOCKER_HUB_USERNAME }}\" \"${{ secrets.DOCKER_HUB_PASSWORD }}\" $images\n          publishPackages ${{ env.CUR_TAG }} ${{ env.BASE_TAG }} ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }} $images\n      - name: Generate release notes\n        run: |\n          release_notes_path=$(pwd)/release-notes.txt\n          source tools/release/release_utils.sh && generateReleaseNotes ${{ env.CUR_TAG }} ${{ env.PRE_TAG }} ${{ secrets.GITHUB_TOKEN }} $release_notes_path\n          echo \"RELEASE_NOTES_PATH=$release_notes_path\" >> $GITHUB_ENV\n      - name: RC Release\n        uses: softprops/action-gh-release@v2\n        if: ${{ env.PRERELEASE == 'true' }}\n        with:\n          body_path: ${{ env.RELEASE_NOTES_PATH }}\n          files: |\n            ${{ env.OFFLINE_PACKAGE_PATH }}\n            ${{ env.MD5SUM_PATH }}\n      - name: GA Release\n        uses: softprops/action-gh-release@v2\n        if: ${{ env.PRERELEASE == 'false' }}\n        with:\n          body_path: ${{ env.RELEASE_NOTES_PATH }}\n          files: |\n            ${{ env.OFFLINE_PACKAGE_PATH }}\n            ${{ env.ONLINE_PACKAGE_PATH }}\n            ${{ env.MD5SUM_PATH }}\n"
						}
					}
				]
			}
		}
	}
}